{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport formatSelectedWords from \"../utils/formatSelectedWords\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\n// Write name generator function that formats names and stores the roots:\n// EX:\n// const generatedNames = [\n//   {\n//     \"generatedName\": [\n//       {\n//         root: \"generated\",\n//         language: \"old irish\",\n//         englishMeaning: \"to generate\",\n//       },\n//       {\n//         root: \"Name\",\n//         language: \"old church slavonic\",\n//         englishMeaning: \"to name\",\n//       },\n//     ],\n//   }\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    rootWordsObj,\n    selectedWords\n  } = useContext(NameGeneratorContext);\n  const [formattedWordStructures, setFormattedWordStructures] = useState(formatSelectedWords(selectedWords, rootWordsObj));\n  useEffect(() => {\n    setFormattedWordStructures(formatSelectedWords(selectedWords, rootWordsObj));\n  }, [rootWordsObj, selectedWords]);\n  const renderFormattedWords = () => {\n    if (formattedWordStructures) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formattedWordStructures.map(formattedWord => {\n          if (formattedWord) {\n            return formattedWord.map(word => {\n              if (word) {\n                return Object.entries(word).map(list => {\n                  const englishWord = list[0];\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                      children: englishWord\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 52,\n                      columnNumber: 27\n                    }, this), list[1].map(wordArr => {\n                      if (wordArr) {\n                        const [lang, translation, engMeaning] = wordArr;\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            children: [lang, \":\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 63,\n                            columnNumber: 37\n                          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: translation\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 67,\n                            columnNumber: 37\n                          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: engMeaning\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 71,\n                            columnNumber: 37\n                          }, this)]\n                        }, translation, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 62,\n                          columnNumber: 35\n                        }, this);\n                      }\n                    })]\n                  }, englishWord, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 51,\n                    columnNumber: 25\n                  }, this);\n                });\n              }\n            });\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderFormattedWords()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneratorOutput, \"wudkeXtaAJCsKwyKGzXsAFuPSzw=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\n\n// const renderSelectedWords = () => {\n//   return Object.entries(selectedWords).map((selectedWord) => {\n//     const type = selectedWord[0];\n//     const list = selectedWord[1];\n//\n//     if (list.length) {\n//       return (\n//         <div key={type}>\n//           {\n//             list.map((word) => {\n//               const theOne = rootWordsObj[type].find((rootWordObj) => {\n//                 return rootWordObj.english?.includes(word);\n//               });\n//\n//               if (theOne) {\n//                 return (\n//                   <div key={word}>\n//                     <h3>{word}</h3>\n//\n//                     {\n//                       Object.entries(theOne).map((entry) => {\n//                         return (\n//                           <div key={entry[0]}>\n//                             <span><b>{entry[0]}</b></span>:\n//                             {' '}\n//                             <span>{entry[1]}</span>\n//                           </div>\n//                         );\n//                       })\n//                     }\n//                   </div>\n//                 );\n//               }\n//\n//               return null;\n//             })\n//           }\n//         </div>\n//       );\n//     }\n//   })\n// };\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","useEffect","useState","NameGeneratorContext","formatSelectedWords","GeneratorOutput","rootWordsObj","selectedWords","formattedWordStructures","setFormattedWordStructures","renderFormattedWords","map","formattedWord","word","Object","entries","list","englishWord","wordArr","lang","translation","engMeaning"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport formatSelectedWords from \"../utils/formatSelectedWords\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\n// Write name generator function that formats names and stores the roots:\n// EX:\n// const generatedNames = [\n//   {\n//     \"generatedName\": [\n//       {\n//         root: \"generated\",\n//         language: \"old irish\",\n//         englishMeaning: \"to generate\",\n//       },\n//       {\n//         root: \"Name\",\n//         language: \"old church slavonic\",\n//         englishMeaning: \"to name\",\n//       },\n//     ],\n//   }\n// ];\n\nconst GeneratorOutput = () => {\n  const { rootWordsObj, selectedWords } = useContext(NameGeneratorContext);\n  const [formattedWordStructures, setFormattedWordStructures] = useState(\n    formatSelectedWords(selectedWords, rootWordsObj),\n  );\n\n  useEffect(() => {\n    setFormattedWordStructures(\n      formatSelectedWords(selectedWords, rootWordsObj),\n    );\n  }, [rootWordsObj, selectedWords])\n\n  const renderFormattedWords = (): JSX.Element | null => {\n    if (formattedWordStructures) {\n      return (\n        <div>\n          {\n            formattedWordStructures.map((formattedWord) => {\n              if (formattedWord) {\n                return formattedWord.map((word) => {\n                  if (word) {\n                    return Object.entries(word).map((list) => {\n                      const englishWord = list[0];\n\n                      return (\n                        <div key={englishWord}>\n                          <h4>\n                            {englishWord}\n                          </h4>\n\n                          {\n                            list[1].map((wordArr) => {\n                              if (wordArr) {\n                                const [lang, translation, engMeaning] = wordArr;\n\n                                return (\n                                  <div key={translation}>\n                                    <span>\n                                      {lang}:\n                                    </span>\n                                    {' '}\n                                    <span>\n                                      {translation}\n                                    </span>\n                                    {' '}\n                                    <span>\n                                      {engMeaning}\n                                    </span>\n                                  </div>\n                                );\n                              }\n                            })\n                          }\n                        </div>\n                      );\n                    });\n                  }\n                });\n              }\n            })\n          }\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <div>\n      {renderFormattedWords()}\n    </div>\n  );\n};\n\nexport default GeneratorOutput;\n\n// const renderSelectedWords = () => {\n//   return Object.entries(selectedWords).map((selectedWord) => {\n//     const type = selectedWord[0];\n//     const list = selectedWord[1];\n//\n//     if (list.length) {\n//       return (\n//         <div key={type}>\n//           {\n//             list.map((word) => {\n//               const theOne = rootWordsObj[type].find((rootWordObj) => {\n//                 return rootWordObj.english?.includes(word);\n//               });\n//\n//               if (theOne) {\n//                 return (\n//                   <div key={word}>\n//                     <h3>{word}</h3>\n//\n//                     {\n//                       Object.entries(theOne).map((entry) => {\n//                         return (\n//                           <div key={entry[0]}>\n//                             <span><b>{entry[0]}</b></span>:\n//                             {' '}\n//                             <span>{entry[1]}</span>\n//                           </div>\n//                         );\n//                       })\n//                     }\n//                   </div>\n//                 );\n//               }\n//\n//               return null;\n//             })\n//           }\n//         </div>\n//       );\n//     }\n//   })\n// };"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,OAAOC,oBAAoB,MAAM,yBAAyB;AAC1D,OAAOC,mBAAmB,MAAM,8BAA8B;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM;IAAEC,YAAY;IAAEC;EAAc,CAAC,GAAGP,UAAU,CAACG,oBAAoB,CAAC;EACxE,MAAM,CAACK,uBAAuB,EAAEC,0BAA0B,CAAC,GAAGP,QAAQ,CACpEE,mBAAmB,CAACG,aAAa,EAAED,YAAY,CAAC,CACjD;EAEDL,SAAS,CAAC,MAAM;IACdQ,0BAA0B,CACxBL,mBAAmB,CAACG,aAAa,EAAED,YAAY,CAAC,CACjD;EACH,CAAC,EAAE,CAACA,YAAY,EAAEC,aAAa,CAAC,CAAC;EAEjC,MAAMG,oBAAoB,GAAG,MAA0B;IACrD,IAAIF,uBAAuB,EAAE;MAC3B,oBACE;QAAA,UAEIA,uBAAuB,CAACG,GAAG,CAAEC,aAAa,IAAK;UAC7C,IAAIA,aAAa,EAAE;YACjB,OAAOA,aAAa,CAACD,GAAG,CAAEE,IAAI,IAAK;cACjC,IAAIA,IAAI,EAAE;gBACR,OAAOC,MAAM,CAACC,OAAO,CAACF,IAAI,CAAC,CAACF,GAAG,CAAEK,IAAI,IAAK;kBACxC,MAAMC,WAAW,GAAGD,IAAI,CAAC,CAAC,CAAC;kBAE3B,oBACE;oBAAA,wBACE;sBAAA,UACGC;oBAAW;sBAAA;sBAAA;sBAAA;oBAAA,QACT,EAGHD,IAAI,CAAC,CAAC,CAAC,CAACL,GAAG,CAAEO,OAAO,IAAK;sBACvB,IAAIA,OAAO,EAAE;wBACX,MAAM,CAACC,IAAI,EAAEC,WAAW,EAAEC,UAAU,CAAC,GAAGH,OAAO;wBAE/C,oBACE;0BAAA,wBACE;4BAAA,WACGC,IAAI,EAAC,GACR;0BAAA;4BAAA;4BAAA;4BAAA;0BAAA,QAAO,EACN,GAAG,eACJ;4BAAA,UACGC;0BAAW;4BAAA;4BAAA;4BAAA;0BAAA,QACP,EACN,GAAG,eACJ;4BAAA,UACGC;0BAAU;4BAAA;4BAAA;4BAAA;0BAAA,QACN;wBAAA,GAXCD,WAAW;0BAAA;0BAAA;0BAAA;wBAAA,QAYf;sBAEV;oBACF,CAAC,CAAC;kBAAA,GA1BIH,WAAW;oBAAA;oBAAA;oBAAA;kBAAA,QA4Bf;gBAEV,CAAC,CAAC;cACJ;YACF,CAAC,CAAC;UACJ;QACF,CAAC;MAAC;QAAA;QAAA;QAAA;MAAA,QAEA;IAEV;IAEA,OAAO,IAAI;EACb,CAAC;EAED,oBACE;IAAA,UACGP,oBAAoB;EAAE;IAAA;IAAA;IAAA;EAAA,QACnB;AAEV,CAAC;AAAC,GAzEIL,eAAe;AAAA,KAAfA,eAAe;AA2ErB,eAAeA,eAAe;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}