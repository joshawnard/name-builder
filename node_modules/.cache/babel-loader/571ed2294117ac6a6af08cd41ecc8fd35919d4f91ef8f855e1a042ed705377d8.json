{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport formatSelectedWords from \"../utils/formatSelectedWords\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    rootWordsObj,\n    selectedWords\n  } = useContext(NameGeneratorContext);\n  const [formattedWordStructures, setFormattedWordStructures] = useState(formatSelectedWords(selectedWords, rootWordsObj));\n  const [generatedNames, setGeneratedNames] = useState([]);\n  useEffect(() => {\n    setFormattedWordStructures(formatSelectedWords(selectedWords, rootWordsObj));\n  }, [rootWordsObj, selectedWords]);\n  useEffect(() => {\n    setGeneratedNames(() => {\n      if (formattedWordStructures && formattedWordStructures[0]) {\n        let generated = [];\n        const structures = formattedWordStructures[0];\n\n        // TODO: determine loop structure to generate more than one name\n        let numOfRoots = Math.floor(Math.random() * structures.length);\n        if (numOfRoots < 2) {\n          numOfRoots = 2;\n        }\n        let nameKey = \"\";\n        let rootsArr = [];\n        for (let i = 0; i < numOfRoots; i++) {\n          const randomStructureIndex = Math.floor(Math.random() * (structures.length - 1));\n          const randomStructure = structures[randomStructureIndex];\n          if (randomStructure) {\n            const translationList = Object.entries(randomStructure).map(entry => {\n              return entry[1].filter(element => {\n                return element !== undefined;\n              });\n            })[0];\n            const randomTranslationIndex = Math.floor(Math.random() * (translationList.length - 1));\n            const translationObj = translationList[randomTranslationIndex];\n            nameKey += (translationObj === null || translationObj === void 0 ? void 0 : translationObj.translation) || \"\";\n            rootsArr.push(translationObj);\n          }\n        }\n        generated.push({\n          [nameKey]: rootsArr\n        });\n        return generated;\n      }\n      return [];\n    });\n  }, [formattedWordStructures]);\n  const renderFormattedWords = () => {\n    if (formattedWordStructures) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formattedWordStructures.map(formattedWord => {\n          if (formattedWord) {\n            return formattedWord.map(word => {\n              if (word) {\n                return Object.entries(word).map(list => {\n                  const englishWord = list[0];\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                      children: englishWord\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 80,\n                      columnNumber: 27\n                    }, this), list[1].map(wordObj => {\n                      if (wordObj) {\n                        const {\n                          language,\n                          translation,\n                          englishMeaning\n                        } = wordObj;\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            children: [language, \":\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 91,\n                            columnNumber: 37\n                          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: translation\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 95,\n                            columnNumber: 37\n                          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: englishMeaning\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 99,\n                            columnNumber: 37\n                          }, this)]\n                        }, translation, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 90,\n                          columnNumber: 35\n                        }, this);\n                      }\n                    })]\n                  }, englishWord, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 79,\n                    columnNumber: 25\n                  }, this);\n                });\n              }\n            });\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  const renderGenerated = () => {\n    if (generatedNames.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: generatedNames.map(generatedNameObj => {\n          const name = Object.keys(generatedNameObj)[0];\n          const rootArr = Object.values(generatedNameObj)[0];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"name-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 19\n            }, this), rootArr.map(root => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: root.language\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 27\n                }, this)\n              }, root.translation, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 25\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"h5\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this)]\n          }, name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderGenerated()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneratorOutput, \"yDCT4if+w/C7h9blcJBP39Y6gHQ=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","useEffect","useState","NameGeneratorContext","formatSelectedWords","GeneratorOutput","rootWordsObj","selectedWords","formattedWordStructures","setFormattedWordStructures","generatedNames","setGeneratedNames","generated","structures","numOfRoots","Math","floor","random","length","nameKey","rootsArr","i","randomStructureIndex","randomStructure","translationList","Object","entries","map","entry","filter","element","undefined","randomTranslationIndex","translationObj","translation","push","renderFormattedWords","formattedWord","word","list","englishWord","wordObj","language","englishMeaning","renderGenerated","generatedNameObj","name","keys","rootArr","values","root"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport formatSelectedWords from \"../utils/formatSelectedWords\";\nimport { GeneratedName, ParsedRootInterface } from \"../interfaces/rootWordInterface\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst GeneratorOutput = () => {\n  const { rootWordsObj, selectedWords } = useContext(NameGeneratorContext);\n  const [formattedWordStructures, setFormattedWordStructures] = useState(\n    formatSelectedWords(selectedWords, rootWordsObj),\n  );\n  const [generatedNames, setGeneratedNames] = useState<GeneratedName[]>([]);\n\n  useEffect(() => {\n    setFormattedWordStructures(\n      formatSelectedWords(selectedWords, rootWordsObj),\n    );\n  }, [rootWordsObj, selectedWords])\n\n  useEffect(() => {\n    setGeneratedNames(() => {\n      if (formattedWordStructures && formattedWordStructures[0]) {\n        let generated: { [key: string]: ParsedRootInterface[] }[] = [];\n        const structures = formattedWordStructures[0];\n\n        // TODO: determine loop structure to generate more than one name\n        let numOfRoots = Math.floor(Math.random() * (structures.length));\n        if (numOfRoots < 2) {\n          numOfRoots = 2;\n        }\n        let nameKey = \"\";\n        let rootsArr: ParsedRootInterface[] = [];\n\n        for (let i = 0; i < numOfRoots; i++) {\n          const randomStructureIndex = Math.floor(Math.random() * (structures.length - 1));\n          const randomStructure = structures[randomStructureIndex];\n\n          if (randomStructure) {\n            const translationList = Object.entries(randomStructure).map((entry) => {\n              return entry[1].filter((element) => {\n                return element !== undefined;\n              });\n            })[0]\n\n            const randomTranslationIndex = Math.floor(Math.random() * (translationList.length - 1));\n            const translationObj = translationList[randomTranslationIndex];\n\n            nameKey += translationObj?.translation || \"\";\n            rootsArr.push(translationObj as ParsedRootInterface);\n          }\n        }\n\n        generated.push({\n          [nameKey]: rootsArr,\n        });\n\n        return generated;\n      }\n\n      return [];\n    });\n  }, [formattedWordStructures])\n\n  const renderFormattedWords = (): JSX.Element | null => {\n    if (formattedWordStructures) {\n      return (\n        <div>\n          {\n            formattedWordStructures.map((formattedWord) => {\n              if (formattedWord) {\n                return formattedWord.map((word) => {\n                  if (word) {\n                    return Object.entries(word).map((list) => {\n                      const englishWord = list[0];\n\n                      return (\n                        <div key={englishWord}>\n                          <h4>\n                            {englishWord}\n                          </h4>\n\n                          {\n                            list[1].map((wordObj) => {\n                              if (wordObj) {\n                                const { language, translation, englishMeaning } = wordObj;\n\n                                return (\n                                  <div key={translation}>\n                                    <span>\n                                      {language}:\n                                    </span>\n                                    {' '}\n                                    <span>\n                                      {translation}\n                                    </span>\n                                    {' '}\n                                    <span>\n                                      {englishMeaning}\n                                    </span>\n                                  </div>\n                                );\n                              }\n                            })\n                          }\n                        </div>\n                      );\n                    });\n                  }\n                });\n              }\n            })\n          }\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  const renderGenerated = (): JSX.Element | null => {\n    if (generatedNames.length) {\n      return (\n        <div>\n          {\n            generatedNames.map((generatedNameObj) => {\n              const name = Object.keys(generatedNameObj)[0];\n              const rootArr = Object.values(generatedNameObj)[0];\n\n              return (\n                <div\n                  className=\"name-card\"\n                  key={name}\n                >\n                  <h4>\n                    {name}\n                  </h4>\n\n                  {\n                    rootArr.map((root) => {\n                      return (\n                        <div key={root.translation}>\n                          <h5>\n                            {root.language}\n                          </h5>\n                        </div>\n                      );\n                    })\n                  }\n\n                  <h5>\n                    {/*{generatedName.language}*/}\n                  </h5>\n                </div>\n              );\n            })\n          }\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <div>\n      {/*{renderFormattedWords()}*/}\n      {renderGenerated()}\n    </div>\n  );\n};\n\nexport default GeneratorOutput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}