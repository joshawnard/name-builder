{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/WordSelectForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport kinshipWords from \"../root_words/kinship/kinship\";\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSelectForm = () => {\n  _s();\n  const {\n    selectedWords,\n    setSelectedWords\n  } = useContext(NameGeneratorContext);\n  const handleCheck = (e, type, word) => {\n    const {\n      currentTarget: {\n        checked\n      }\n    } = e;\n    if (checked) {\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [...selectedWords[type], word]\n      });\n    } else {\n      let words = selectedWords[type];\n      const index = words.indexOf(word, 0);\n      if (index > -1) {\n        words.splice(index, 1);\n      }\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [...words]\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Kinship\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), kinshipWords.map(wordObj => {\n        const word = Object.keys(wordObj)[0];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              name: word,\n              onChange: e => handleCheck(e, \"kinship\", word),\n              type: \"checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 19\n            }, this), word]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(WordSelectForm, \"Wnhkjtfczvfs/6yfcrwZneLNOfE=\");\n_c = WordSelectForm;\nexport default WordSelectForm;\nvar _c;\n$RefreshReg$(_c, \"WordSelectForm\");","map":{"version":3,"names":["React","useContext","kinshipWords","NameGeneratorContext","WordSelectForm","selectedWords","setSelectedWords","handleCheck","e","type","word","currentTarget","checked","words","index","indexOf","splice","map","wordObj","Object","keys"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/WordSelectForm.tsx"],"sourcesContent":["import React, { ChangeEvent, useContext } from 'react';\nimport kinshipWords from \"../root_words/kinship/kinship\";\nimport { wordType } from \"../types/selectedWords\";\nimport NameGeneratorContext from \"../NameGeneratorContext\";\n\nconst WordSelectForm = (): JSX.Element => {\n  const { selectedWords, setSelectedWords } = useContext(NameGeneratorContext);\n\n  const handleCheck = (e: ChangeEvent<HTMLInputElement>, type: wordType, word: string) => {\n    const { currentTarget: { checked } } = e;\n\n    if (checked) {\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [\n          ...selectedWords[type],\n          word,\n        ],\n      });\n    } else {\n      let words = selectedWords[type]\n      const index = words.indexOf(word, 0);\n\n      if (index > -1) {\n         words.splice(index, 1);\n      }\n\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [...words],\n      });\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <h3>\n          Kinship\n        </h3>\n\n        {\n          kinshipWords.map((wordObj) => {\n            const word = Object.keys(wordObj)[0];\n\n            return (\n              <div>\n                <label>\n                  <input\n                    name={word}\n                    onChange={(e) => handleCheck(e, \"kinship\", word)}\n                    type=\"checkbox\"\n                  />\n\n                  {word}\n                </label>\n              </div>\n            );\n          })\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default WordSelectForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAiBC,UAAU,QAAQ,OAAO;AACtD,OAAOC,YAAY,MAAM,+BAA+B;AAExD,OAAOC,oBAAoB,MAAM,yBAAyB;AAAC;AAE3D,MAAMC,cAAc,GAAG,MAAmB;EAAA;EACxC,MAAM;IAAEC,aAAa;IAAEC;EAAiB,CAAC,GAAGL,UAAU,CAACE,oBAAoB,CAAC;EAE5E,MAAMI,WAAW,GAAG,CAACC,CAAgC,EAAEC,IAAc,EAAEC,IAAY,KAAK;IACtF,MAAM;MAAEC,aAAa,EAAE;QAAEC;MAAQ;IAAE,CAAC,GAAGJ,CAAC;IAExC,IAAII,OAAO,EAAE;MACXN,gBAAgB,CAAC;QACf,GAAGD,aAAa;QAChB,CAACI,IAAI,GAAG,CACN,GAAGJ,aAAa,CAACI,IAAI,CAAC,EACtBC,IAAI;MAER,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAIG,KAAK,GAAGR,aAAa,CAACI,IAAI,CAAC;MAC/B,MAAMK,KAAK,GAAGD,KAAK,CAACE,OAAO,CAACL,IAAI,EAAE,CAAC,CAAC;MAEpC,IAAII,KAAK,GAAG,CAAC,CAAC,EAAE;QACbD,KAAK,CAACG,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACzB;MAEAR,gBAAgB,CAAC;QACf,GAAGD,aAAa;QAChB,CAACI,IAAI,GAAG,CAAC,GAAGI,KAAK;MACnB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACE;IAAA,uBACE;MAAA,wBACE;QAAA,UAAI;MAEJ;QAAA;QAAA;QAAA;MAAA,QAAK,EAGHX,YAAY,CAACe,GAAG,CAAEC,OAAO,IAAK;QAC5B,MAAMR,IAAI,GAAGS,MAAM,CAACC,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC;QAEpC,oBACE;UAAA,uBACE;YAAA,wBACE;cACE,IAAI,EAAER,IAAK;cACX,QAAQ,EAAGF,CAAC,IAAKD,WAAW,CAACC,CAAC,EAAE,SAAS,EAAEE,IAAI,CAAE;cACjD,IAAI,EAAC;YAAU;cAAA;cAAA;cAAA;YAAA,QACf,EAEDA,IAAI;UAAA;YAAA;YAAA;YAAA;UAAA;QACC;UAAA;UAAA;UAAA;QAAA,QACJ;MAEV,CAAC,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA;EAEA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GA1DIN,cAAc;AAAA,KAAdA,cAAc;AA4DpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}