{"ast":null,"code":"import getWordsInQuotes from \"./getWordsInQuotes\";\nconst parseDataString = (dataString, language) => {\n  if (dataString) {\n    const splitString = dataString.split(\" \");\n    // TODO: split by language strings?\n    // If celtic split by OIr or W?\n    // Maybe leave this as a later feature?\n\n    const defaultLanguageAndWord = {\n      language: language,\n      translation: splitString[1],\n      englishMeaning: getWordsInQuotes(dataString)\n    };\n    let languageAndWord = {\n      language: language,\n      translation: splitString[0],\n      englishMeaning: getWordsInQuotes(dataString)\n    };\n    switch (language) {\n      case \"ancient greek\":\n        if ([\"Att\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"attic greek\"\n          };\n        }\n        if ([\"Doric\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"doric\"\n          };\n        }\n        if ([\"Myc\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"mycenaean\"\n          };\n        }\n        break;\n      case \"baltic\":\n        if ([\"OPrus\", \"OP\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old prussian\"\n          };\n        }\n        if ([\"Lith\", \"OLith\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"lithuanian\"\n          };\n        }\n        if ([\"Latv\", \"Latvian\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"latvian\"\n          };\n        }\n        break;\n      case \"celtic\":\n        if ([\"OIr\", \"OI\", \"Old Irish\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old irish\"\n          };\n        }\n        if ([\"Gaul\", \"Gaul.\", \"Gaulish\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"gaulish\"\n          };\n        }\n        if ([\"W\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"welsh\"\n          };\n        }\n        if ([\"MWel\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"middle welsh\"\n          };\n        }\n        if ([\"MBret\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"breton\"\n          };\n        }\n        break;\n      case \"english\":\n        if ([\"OE\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old english\"\n          };\n        }\n        break;\n      case \"gothic\":\n        if (splitString[0] === \"ON\") {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old norse\"\n          };\n        }\n        if ([\"OHG\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old high german\"\n          };\n        }\n        if ([\"Ger\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"german\"\n          };\n        }\n        break;\n      case \"hittite\":\n        if ([\"Luwian\", \"HLuw\", \"Luw\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"luwian\"\n          };\n        }\n        if ([\"Hitt\", \"Hitt.\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"hittite\"\n          };\n        }\n        break;\n      case \"iranian\":\n        if (splitString[0] === \"Av\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"avestan\"\n          };\n        }\n        if (splitString[0] === \"Old\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old iranian\",\n            translation: splitString[2]\n          };\n        }\n        if (splitString[0] === \"Proto-Iranian\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"proto-iranian\"\n          };\n        }\n        if ([\"NPers\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"dari, new persian\"\n          };\n        }\n        break;\n      case \"latin\":\n        if ([\"Osc\", \"Oscan\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"oscan\"\n          };\n        }\n        if ([\"Umbrian\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"umbrian\"\n          };\n        }\n        break;\n      case \"slavic\":\n        if (splitString[0] === \"OCS\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old church slavonic\"\n          };\n        }\n        if ([\"Russ\", \"Russ.\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"russian\"\n          };\n        }\n        break;\n      case \"tocharian\":\n        if (splitString[0] === \"A\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"tocharian A\"\n          };\n        }\n        if (splitString[0] === \"B\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"tocharian B\"\n          };\n        }\n        break;\n      default:\n        languageAndWord = {\n          language: language,\n          translation: splitString[0],\n          englishMeaning: getWordsInQuotes(dataString)\n        };\n        break;\n    }\n    return languageAndWord;\n  }\n  return undefined;\n};\nexport default parseDataString;","map":{"version":3,"names":["getWordsInQuotes","parseDataString","dataString","language","splitString","split","defaultLanguageAndWord","translation","englishMeaning","languageAndWord","includes","undefined"],"sources":["/Users/jard/Desktop/code/name-generator/src/utils/parseDataString.ts"],"sourcesContent":["import {\n  ParsedRootInterface\n} from \"../interfaces/rootWordInterface\";\nimport getWordsInQuotes from \"./getWordsInQuotes\";\n\nconst parseDataString = (\n  dataString: string | undefined,\n  language: string,\n): ParsedRootInterface | undefined => {\n  if (dataString) {\n    const splitString = dataString.split(\" \");\n    // TODO: split by language strings?\n    // If celtic split by OIr or W?\n    // Maybe leave this as a later feature?\n\n    const defaultLanguageAndWord = {\n      language: language,\n      translation: splitString[1],\n      englishMeaning: getWordsInQuotes(dataString),\n    }\n\n    let languageAndWord: ParsedRootInterface = {\n      language: language,\n      translation: splitString[0],\n      englishMeaning: getWordsInQuotes(dataString),\n    };\n\n    switch (language) {\n      case \"ancient greek\":\n        if ([\"Att\"].includes(splitString[0])) {\n           languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"attic greek\",\n          }\n        }\n\n        if ([\"Doric\"].includes(splitString[0])) {\n           languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"doric\",\n          }\n        }\n\n        if ([\"Myc\"].includes(splitString[0])) {\n           languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"mycenaean\",\n          }\n        }\n\n        break;\n\n      case \"baltic\":\n        if ([\"OPrus\", \"OP\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old prussian\",\n          }\n        }\n\n        if ([\"Lith\", \"OLith\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"lithuanian\",\n          }\n        }\n\n        if ([\"Latv\", \"Latvian\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"latvian\",\n          }\n        }\n\n        break;\n\n      case \"celtic\":\n        if ([\"OIr\", \"OI\", \"Old Irish\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old irish\",\n          }\n        }\n\n        if ([\"Gaul\", \"Gaul.\", \"Gaulish\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"gaulish\",\n          }\n        }\n\n        if ([\"W\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"welsh\",\n          }\n        }\n\n        if ([\"MWel\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"middle welsh\",\n          }\n        }\n\n        if ([\"MBret\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"breton\",\n          }\n        }\n\n        break;\n\n      case \"english\":\n        if ([\"OE\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old english\",\n          }\n        }\n\n        break;\n\n      case \"gothic\":\n        if (splitString[0] === \"ON\") {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old norse\",\n          }\n        }\n\n        if ([\"OHG\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old high german\",\n          }\n        }\n\n        if ([\"Ger\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"german\",\n          }\n        }\n\n        break;\n\n      case \"hittite\":\n        if ([\"Luwian\", \"HLuw\", \"Luw\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"luwian\",\n          }\n        }\n\n        if ([\"Hitt\", \"Hitt.\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"hittite\",\n          }\n        }\n\n        break;\n\n      case \"iranian\":\n        if (splitString[0] === \"Av\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"avestan\",\n          }\n        }\n\n        if (splitString[0] === \"Old\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old iranian\",\n            translation: splitString[2],\n          }\n        }\n\n        if (splitString[0] === \"Proto-Iranian\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"proto-iranian\",\n          }\n        }\n\n        if ([\"NPers\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"dari, new persian\",\n          }\n        }\n\n        break;\n\n      case \"latin\":\n        if ([\"Osc\", \"Oscan\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"oscan\",\n          }\n        }\n\n        if ([\"Umbrian\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"umbrian\",\n          }\n        }\n\n        break;\n\n      case \"slavic\":\n        if (splitString[0] === \"OCS\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old church slavonic\",\n          }\n        }\n\n        if ([\"Russ\", \"Russ.\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"russian\",\n          }\n        }\n\n        break;\n\n      case \"tocharian\":\n        if (splitString[0] === \"A\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"tocharian A\",\n          }\n        }\n\n        if (splitString[0] === \"B\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"tocharian B\",\n          }\n        }\n\n        break;\n\n      default:\n        languageAndWord = {\n          language: language,\n          translation: splitString[0],\n          englishMeaning: getWordsInQuotes(dataString),\n        };\n\n        break;\n    }\n\n    return languageAndWord;\n  }\n\n  return undefined;\n};\n\nexport default parseDataString;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}