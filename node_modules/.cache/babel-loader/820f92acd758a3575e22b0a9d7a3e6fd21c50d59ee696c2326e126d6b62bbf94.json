{"ast":null,"code":"const parseDataString = (dataString, language) => {\n  if (dataString) {\n    const splitString = dataString.split(\" \");\n    let languageAndWord = [language, splitString[0], splitString[2]];\n    switch (language) {\n      case \"baltic\":\n        if (splitString[0] === \"OPrus\") {\n          languageAndWord = [\"old prussian\", splitString[1], splitString[2]];\n        }\n        break;\n      case \"celtic\":\n        if (splitString[0] === \"OIr\") {\n          languageAndWord = [\"old irish\", splitString[1], splitString[2]];\n        }\n        break;\n      case \"slavic\":\n        if (splitString[0] === \"OCS\") {\n          languageAndWord = [\"old church slavonic\", splitString[1], splitString[2]];\n        }\n        break;\n      case \"tocharian\":\n        if (splitString[0] === \"A\") {\n          languageAndWord = [\"tocharian A\", splitString[1], splitString[2]];\n        }\n        break;\n      default:\n        languageAndWord = [language, splitString[0], splitString[2]];\n        break;\n    }\n    return languageAndWord;\n  }\n  return undefined;\n};\nconst formatSelectedWords = (selectedWords, rootWordsObj) => {\n  const selectedEntries = Object.entries(selectedWords);\n  if (selectedEntries.length) {\n    return Object.entries(selectedWords).map(selectedWord => {\n      const type = selectedWord[0];\n      const list = selectedWord[1];\n      if (list.length) {\n        return list.map(word => {\n          const theOne = rootWordsObj[type].find(rootWordObj => {\n            var _rootWordObj$english;\n            return (_rootWordObj$english = rootWordObj.english) === null || _rootWordObj$english === void 0 ? void 0 : _rootWordObj$english.includes(word);\n          });\n          if (theOne) {\n            return {\n              [word]: Object.entries(theOne).map(entry => {\n                const parsedWordAndLanguage = parseDataString(entry[1], entry[0]);\n                if (parsedWordAndLanguage) {\n                  return parsedWordAndLanguage;\n                }\n              })\n            };\n          }\n        });\n      }\n    });\n  }\n  return null;\n};\nexport default formatSelectedWords;","map":{"version":3,"names":["parseDataString","dataString","language","splitString","split","languageAndWord","undefined","formatSelectedWords","selectedWords","rootWordsObj","selectedEntries","Object","entries","length","map","selectedWord","type","list","word","theOne","find","rootWordObj","english","includes","entry","parsedWordAndLanguage"],"sources":["/Users/jard/Desktop/code/name-generator/src/utils/formatSelectedWords.ts"],"sourcesContent":["import { SelectedWordsInterface } from \"../types/selectedWords\";\nimport { RootWordsObjInterface } from \"../interfaces/rootWordInterface\";\n\nconst parseDataString = (\n  dataString: string | undefined,\n  language: string,\n): [\n  string, // language\n  string, // word\n  string, // english meaning\n] | undefined => {\n  if (dataString) {\n   const splitString = dataString.split(\" \");\n   let languageAndWord: [string, string, string] = [\n     language,\n     splitString[0],\n     splitString[2],\n   ];\n\n   switch(language) {\n     case \"baltic\":\n       if (splitString[0] === \"OPrus\") {\n         languageAndWord = [\n           \"old prussian\",\n           splitString[1],\n           splitString[2]\n         ];\n       }\n       break;\n\n     case \"celtic\":\n       if (splitString[0] === \"OIr\") {\n         languageAndWord = [\n           \"old irish\",\n           splitString[1],\n           splitString[2]\n         ];\n       }\n       break;\n\n     case \"slavic\":\n       if (splitString[0] === \"OCS\") {\n         languageAndWord = [\n           \"old church slavonic\",\n           splitString[1],\n           splitString[2],\n         ];\n       }\n       break;\n\n     case \"tocharian\":\n       if (splitString[0] === \"A\") {\n         languageAndWord = [\n           \"tocharian A\",\n           splitString[1],\n           splitString[2],\n         ];\n       }\n       break;\n\n     default:\n       languageAndWord = [\n         language,\n         splitString[0],\n         splitString[2],\n       ]\n       break;\n   }\n\n    return languageAndWord;\n  }\n\n  return undefined;\n};\n\nconst formatSelectedWords = (\n  selectedWords: SelectedWordsInterface,\n  rootWordsObj: RootWordsObjInterface,\n) => {\n  const selectedEntries = Object.entries(selectedWords);\n\n  if (selectedEntries.length) {\n    return Object.entries(selectedWords).map((selectedWord) => {\n      const type = selectedWord[0];\n      const list = selectedWord[1];\n\n      if (list.length) {\n        return list.map((word) => {\n          const theOne = rootWordsObj[type].find((rootWordObj) => {\n            return rootWordObj.english?.includes(word);\n          });\n\n          if (theOne) {\n            return {\n              [word]: Object.entries(theOne).map((entry) => {\n                const parsedWordAndLanguage = parseDataString(entry[1], entry[0]);\n\n                if (parsedWordAndLanguage) {\n                  return parsedWordAndLanguage;\n                }\n              }),\n            };\n          }\n        })\n      }\n    });\n  }\n\n  return null;\n};\n\nexport default formatSelectedWords;"],"mappings":"AAGA,MAAMA,eAAe,GAAG,CACtBC,UAA8B,EAC9BC,QAAgB,KAKD;EACf,IAAID,UAAU,EAAE;IACf,MAAME,WAAW,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC;IACzC,IAAIC,eAAyC,GAAG,CAC9CH,QAAQ,EACRC,WAAW,CAAC,CAAC,CAAC,EACdA,WAAW,CAAC,CAAC,CAAC,CACf;IAED,QAAOD,QAAQ;MACb,KAAK,QAAQ;QACX,IAAIC,WAAW,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;UAC9BE,eAAe,GAAG,CAChB,cAAc,EACdF,WAAW,CAAC,CAAC,CAAC,EACdA,WAAW,CAAC,CAAC,CAAC,CACf;QACH;QACA;MAEF,KAAK,QAAQ;QACX,IAAIA,WAAW,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;UAC5BE,eAAe,GAAG,CAChB,WAAW,EACXF,WAAW,CAAC,CAAC,CAAC,EACdA,WAAW,CAAC,CAAC,CAAC,CACf;QACH;QACA;MAEF,KAAK,QAAQ;QACX,IAAIA,WAAW,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;UAC5BE,eAAe,GAAG,CAChB,qBAAqB,EACrBF,WAAW,CAAC,CAAC,CAAC,EACdA,WAAW,CAAC,CAAC,CAAC,CACf;QACH;QACA;MAEF,KAAK,WAAW;QACd,IAAIA,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UAC1BE,eAAe,GAAG,CAChB,aAAa,EACbF,WAAW,CAAC,CAAC,CAAC,EACdA,WAAW,CAAC,CAAC,CAAC,CACf;QACH;QACA;MAEF;QACEE,eAAe,GAAG,CAChBH,QAAQ,EACRC,WAAW,CAAC,CAAC,CAAC,EACdA,WAAW,CAAC,CAAC,CAAC,CACf;QACD;IAAM;IAGT,OAAOE,eAAe;EACxB;EAEA,OAAOC,SAAS;AAClB,CAAC;AAED,MAAMC,mBAAmB,GAAG,CAC1BC,aAAqC,EACrCC,YAAmC,KAChC;EACH,MAAMC,eAAe,GAAGC,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC;EAErD,IAAIE,eAAe,CAACG,MAAM,EAAE;IAC1B,OAAOF,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC,CAACM,GAAG,CAAEC,YAAY,IAAK;MACzD,MAAMC,IAAI,GAAGD,YAAY,CAAC,CAAC,CAAC;MAC5B,MAAME,IAAI,GAAGF,YAAY,CAAC,CAAC,CAAC;MAE5B,IAAIE,IAAI,CAACJ,MAAM,EAAE;QACf,OAAOI,IAAI,CAACH,GAAG,CAAEI,IAAI,IAAK;UACxB,MAAMC,MAAM,GAAGV,YAAY,CAACO,IAAI,CAAC,CAACI,IAAI,CAAEC,WAAW,IAAK;YAAA;YACtD,+BAAOA,WAAW,CAACC,OAAO,yDAAnB,qBAAqBC,QAAQ,CAACL,IAAI,CAAC;UAC5C,CAAC,CAAC;UAEF,IAAIC,MAAM,EAAE;YACV,OAAO;cACL,CAACD,IAAI,GAAGP,MAAM,CAACC,OAAO,CAACO,MAAM,CAAC,CAACL,GAAG,CAAEU,KAAK,IAAK;gBAC5C,MAAMC,qBAAqB,GAAGzB,eAAe,CAACwB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEjE,IAAIC,qBAAqB,EAAE;kBACzB,OAAOA,qBAAqB;gBAC9B;cACF,CAAC;YACH,CAAC;UACH;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;EAEA,OAAO,IAAI;AACb,CAAC;AAED,eAAelB,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}