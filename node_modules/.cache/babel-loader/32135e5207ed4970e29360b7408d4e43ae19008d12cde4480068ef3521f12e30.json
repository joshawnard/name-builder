{"ast":null,"code":"import _objectSpread from\"/Users/jard/Desktop/code/name-generator/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import getWordsInQuotes from\"./getWordsInQuotes\";var parseDataString=function parseDataString(dataString,language){if(dataString){var splitString=dataString.split(\" \");// TODO: split by language strings?\n// If celtic split by OIr or W?\n// Maybe leave this as a later feature?\nvar defaultLanguageAndWord={language:language,translation:splitString[1],englishMeaning:getWordsInQuotes(dataString)};var languageAndWord={language:language,translation:splitString[0],englishMeaning:getWordsInQuotes(dataString)};switch(language){case\"ancient greek\":if([\"Att\"].includes(splitString[0])){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"attic greek\"});}if([\"Doric\"].includes(splitString[0])){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"doric\"});}if([\"Myc\"].includes(splitString[0])){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"mycenaean\"});}break;case\"baltic\":if([\"OPrus\",\"OP\"].includes(splitString[0])){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"old prussian\"});}if([\"Lith\",\"OLith\"].includes(splitString[0])){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"lithuanian\"});}if([\"Latv\",\"Latvian\"].includes(splitString[0])){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"latvian\"});}break;case\"celtic\":if([\"OIr\",\"OI\",\"Old Irish\"].includes(splitString[0])){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"old irish\"});}if([\"Gaul\",\"Gaul.\",\"Gaulish\"].includes(splitString[0])){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"gaulish\"});}if([\"W\"].includes(splitString[0])){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"welsh\"});}if([\"MWel\"].includes(splitString[0])){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"middle welsh\"});}if([\"MBret\"].includes(splitString[0])){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"breton\"});}break;case\"english\":if([\"OE\"].includes(splitString[0])){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"old english\"});}break;case\"gothic\":if(splitString[0]===\"ON\"){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"old norse\"});}if([\"OHG\"].includes(splitString[0])){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"old high german\"});}break;case\"hittite\":if([\"Luwian\",\"HLuw\"].includes(splitString[0])){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"luwian\"});}if([\"Hitt\",\"Hitt.\"].includes(splitString[0])){languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"hittite\"});}break;case\"iranian\":if(splitString[0]===\"Av\"){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"avestan\"});}if(splitString[0]===\"Old\"){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"old iranian\",translation:splitString[2]});}if(splitString[0]===\"Proto-Iranian\"){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"proto-iranian\"});}break;case\"latin\":if([\"Osc\",\"Oscan\"].includes(splitString[0])){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"oscan\"});}if([\"Umbrian\"].includes(splitString[0])){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"umbrian\"});}break;case\"slavic\":if(splitString[0]===\"OCS\"){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"old church slavonic\"});}if([\"Russ\",\"Russ.\"].includes(splitString[0])){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"russian\"});}break;case\"tocharian\":if(splitString[0]===\"A\"){languageAndWord=languageAndWord=_objectSpread(_objectSpread({},defaultLanguageAndWord),{},{language:\"tocharian A\"});}break;default:languageAndWord={language:language,translation:splitString[0],englishMeaning:getWordsInQuotes(dataString)};break;}return languageAndWord;}return undefined;};export default parseDataString;","map":{"version":3,"names":["getWordsInQuotes","parseDataString","dataString","language","splitString","split","defaultLanguageAndWord","translation","englishMeaning","languageAndWord","includes","undefined"],"sources":["/Users/jard/Desktop/code/name-generator/src/utils/parseDataString.ts"],"sourcesContent":["import {\n  ParsedRootInterface\n} from \"../interfaces/rootWordInterface\";\nimport getWordsInQuotes from \"./getWordsInQuotes\";\n\nconst parseDataString = (\n  dataString: string | undefined,\n  language: string,\n): ParsedRootInterface | undefined => {\n  if (dataString) {\n    const splitString = dataString.split(\" \");\n    // TODO: split by language strings?\n    // If celtic split by OIr or W?\n    // Maybe leave this as a later feature?\n\n    const defaultLanguageAndWord = {\n      language: language,\n      translation: splitString[1],\n      englishMeaning: getWordsInQuotes(dataString),\n    }\n\n    let languageAndWord: ParsedRootInterface = {\n      language: language,\n      translation: splitString[0],\n      englishMeaning: getWordsInQuotes(dataString),\n    };\n\n    switch (language) {\n      case \"ancient greek\":\n        if ([\"Att\"].includes(splitString[0])) {\n           languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"attic greek\",\n          }\n        }\n\n        if ([\"Doric\"].includes(splitString[0])) {\n           languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"doric\",\n          }\n        }\n\n        if ([\"Myc\"].includes(splitString[0])) {\n           languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"mycenaean\",\n          }\n        }\n\n        break;\n\n      case \"baltic\":\n        if ([\"OPrus\", \"OP\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old prussian\",\n          }\n        }\n\n        if ([\"Lith\", \"OLith\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"lithuanian\",\n          }\n        }\n\n        if ([\"Latv\", \"Latvian\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"latvian\",\n          }\n        }\n\n        break;\n\n      case \"celtic\":\n        if ([\"OIr\", \"OI\", \"Old Irish\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old irish\",\n          }\n        }\n\n        if ([\"Gaul\", \"Gaul.\", \"Gaulish\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"gaulish\",\n          }\n        }\n\n        if ([\"W\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"welsh\",\n          }\n        }\n\n        if ([\"MWel\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"middle welsh\",\n          }\n        }\n\n        if ([\"MBret\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"breton\",\n          }\n        }\n\n        break;\n\n      case \"english\":\n        if ([\"OE\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old english\",\n          }\n        }\n\n        break;\n\n      case \"gothic\":\n        if (splitString[0] === \"ON\") {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old norse\",\n          }\n        }\n\n        if ([\"OHG\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old high german\",\n          }\n        }\n\n        break;\n\n      case \"hittite\":\n        if ([\"Luwian\", \"HLuw\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"luwian\",\n          }\n        }\n\n        if ([\"Hitt\", \"Hitt.\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"hittite\",\n          }\n        }\n\n        break;\n\n      case \"iranian\":\n        if (splitString[0] === \"Av\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"avestan\",\n          }\n        }\n\n        if (splitString[0] === \"Old\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old iranian\",\n            translation: splitString[2],\n          }\n        }\n\n        if (splitString[0] === \"Proto-Iranian\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"proto-iranian\",\n          }\n        }\n\n        break;\n\n      case \"latin\":\n        if ([\"Osc\", \"Oscan\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"oscan\",\n          }\n        }\n\n        if ([\"Umbrian\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"umbrian\",\n          }\n        }\n\n        break;\n\n      case \"slavic\":\n        if (splitString[0] === \"OCS\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old church slavonic\",\n          }\n        }\n\n        if ([\"Russ\", \"Russ.\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"russian\",\n          }\n        }\n\n        break;\n\n      case \"tocharian\":\n        if (splitString[0] === \"A\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"tocharian A\",\n          }\n        }\n\n        break;\n\n      default:\n        languageAndWord = {\n          language: language,\n          translation: splitString[0],\n          englishMeaning: getWordsInQuotes(dataString),\n        };\n\n        break;\n    }\n\n    return languageAndWord;\n  }\n\n  return undefined;\n};\n\nexport default parseDataString;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}