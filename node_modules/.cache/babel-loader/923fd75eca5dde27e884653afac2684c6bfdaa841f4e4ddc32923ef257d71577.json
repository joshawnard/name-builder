{"ast":null,"code":"import getWordsInQuotes from \"./getWordsInQuotes\";\nimport removeExtraChars from \"./removeExtraChars\";\nconst parseDataString = (dataString, language) => {\n  if (dataString) {\n    const splitString = dataString.split(\" \");\n    // TODO: split by language strings?\n    // If celtic split by OIr or W?\n    // Maybe leave this as a later feature?\n\n    const defaultLanguageAndWord = {\n      language: language,\n      translation: splitString[1],\n      englishMeaning: getWordsInQuotes(dataString)\n    };\n    let languageAndWord = {\n      language: language,\n      translation: splitString[0],\n      englishMeaning: getWordsInQuotes(dataString)\n    };\n    switch (language) {\n      case \"ancient greek\":\n        if ([\"Att\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"attic greek\"\n          };\n        }\n        if ([\"Pamphylian\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"pamphylian\"\n          };\n        }\n        if ([\"Doric\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"doric\"\n          };\n        }\n        if ([\"Myc\", \"MycGr\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"mycenaean\"\n          };\n        }\n        if ([\"Homeric\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"homeric greek\"\n          };\n        }\n        break;\n      case \"albanian\":\n        if ([\"Gheg\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"albanian (gheg)\"\n          };\n        }\n        if ([\"OldTosk\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"albanian (old tosk)\"\n          };\n        }\n        break;\n      case \"armenian\":\n        if ([\"OArm\", \"OldArm\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"classical armenian\"\n          };\n        }\n        break;\n      case \"baltic\":\n        if ([\"OPrus\", \"OP\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old prussian\"\n          };\n        }\n        if ([\"Lith\", \"OLith\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"lithuanian\"\n          };\n        }\n        if ([\"Latv\", \"Latvian\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"latvian\"\n          };\n        }\n        break;\n      case \"celtic\":\n        if ([\"Irsh\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"irish\"\n          };\n        }\n        if ([\"Celtib\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"celtiberian\"\n          };\n        }\n        if ([\"OIr\", \"OI\", \"Old Irish\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old irish\"\n          };\n        }\n        if ([\"MIr\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"middle irish\"\n          };\n        }\n        if ([\"Gaul\", \"Gaul.\", \"Gaulish\", \"Gau\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"gaulish\"\n          };\n        }\n        if ([\"W\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"welsh\"\n          };\n        }\n        if ([\"MWel\", \"MW\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"middle welsh\"\n          };\n        }\n        if ([\"MBret\", \"Bret\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"breton\"\n          };\n        }\n        break;\n      case \"english\":\n        if ([\"OE\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old english\"\n          };\n        }\n        if ([\"Scot\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"scottish english\"\n          };\n        }\n        break;\n      case \"gothic\":\n        if ([\"ON\", \"Nor\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old norse\"\n          };\n        }\n        if ([\"OHG\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old high german\"\n          };\n        }\n        if ([\"Ger\", \"German\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"german\"\n          };\n        }\n        if ([\"OldSaxon\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old saxon\"\n          };\n        }\n        if ([\"Yiddish\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"yiddish\"\n          };\n        }\n        break;\n      case \"hittite\":\n        if ([\"Luwian\", \"HLuw\", \"Luw\", \"HierLuv\", \"Luvian\", \"CLuw\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"luwian\"\n          };\n        }\n        if ([\"Hitt\", \"Hitt.\", \"Hittite\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"hittite\"\n          };\n        }\n        if ([\"Lydian\", \"Lyd\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"lydian\"\n          };\n        }\n        if ([\"Lyc\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"lycian\"\n          };\n        }\n        break;\n      case \"iranian\":\n        if ([\"YAv\", \"Av\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"avestan\"\n          };\n        }\n        if ([\"Wakhi\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"Wakhi\"\n          };\n        }\n        if ([\"Kurdish\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"kurdish\"\n          };\n        }\n        if ([\"Ossetic\", \"Oss\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"ossetian\"\n          };\n        }\n        if (splitString[0] === \"Old\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old iranian\",\n            translation: splitString[2]\n          };\n        }\n        if (splitString[0] === \"Proto-Iranian\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"proto-iranian\"\n          };\n        }\n        if ([\"NPers\", \"Npers\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"dari, new persian\"\n          };\n        }\n        if ([\"Persian\", \"Per\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"persian\"\n          };\n        }\n        if ([\"OPers\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old persian\"\n          };\n        }\n        if ([\"Pash\", \"Past\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"pashto\"\n          };\n        }\n        break;\n      case \"latin\":\n        if ([\"Osc\", \"Oscan\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"oscan\"\n          };\n        }\n        if ([\"Umbrian\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"umbrian\"\n          };\n        }\n        break;\n      case \"pie\":\n        if (language === \"pie\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            translation: splitString[0],\n            language: \"proto indo european\"\n          };\n        }\n        break;\n      case \"sanskrit\":\n        if ([\"Ved\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"vedic\"\n          };\n        }\n        break;\n      case \"slavic\":\n        if ([\"OCS\", \"OSl\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old church slavonic\"\n          };\n        }\n        if ([\"OldSorbian\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old sorbian\"\n          };\n        }\n        if ([\"Russ\", \"Russ.\", \"Russian\", \"Rus\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"russian\"\n          };\n        }\n        if ([\"Croatian\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"croatian\"\n          };\n        }\n        if ([\"Czech\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"czech\"\n          };\n        }\n        if ([\"OBulg\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old bulgarian\"\n          };\n        }\n        if ([\"Bulg\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"bulgarian\"\n          };\n        }\n        if ([\"MBulg\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"middle bulgarian\"\n          };\n        }\n        if ([\"Ukr\", \"Ukrainian\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"ukranian\"\n          };\n        }\n        if ([\"Pol\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"polish\"\n          };\n        }\n        break;\n      case \"tocharian\":\n        if (splitString[0] === \"A\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"tocharian A\"\n          };\n        }\n        if (splitString[0] === \"B\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"tocharian B\"\n          };\n        }\n        if ([\"AB\", \"A/B\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"tocharian A/B\"\n          };\n        }\n        break;\n      default:\n        languageAndWord = {\n          language: language,\n          translation: splitString[0],\n          englishMeaning: getWordsInQuotes(dataString)\n        };\n        break;\n    }\n    return {\n      language: removeExtraChars(languageAndWord.language),\n      translation: removeExtraChars(languageAndWord.translation),\n      // translation: removeExtraChars(languageAndWord.translation).toLowerCase(),\n      englishMeaning: languageAndWord.englishMeaning\n    };\n  }\n  return undefined;\n};\nexport default parseDataString;","map":{"version":3,"names":["getWordsInQuotes","removeExtraChars","parseDataString","dataString","language","splitString","split","defaultLanguageAndWord","translation","englishMeaning","languageAndWord","includes","undefined"],"sources":["/Users/jard/Desktop/code/name-generator/src/utils/parseDataString.ts"],"sourcesContent":["import {\n  ParsedRootInterface\n} from \"../interfaces/rootWordInterface\";\nimport getWordsInQuotes from \"./getWordsInQuotes\";\nimport removeExtraChars from \"./removeExtraChars\";\n\nconst parseDataString = (\n  dataString: string | undefined,\n  language: string,\n): ParsedRootInterface | undefined => {\n  if (dataString) {\n    const splitString = dataString.split(\" \");\n    // TODO: split by language strings?\n    // If celtic split by OIr or W?\n    // Maybe leave this as a later feature?\n\n    const defaultLanguageAndWord = {\n      language: language,\n      translation: splitString[1],\n      englishMeaning: getWordsInQuotes(dataString),\n    }\n\n    let languageAndWord: ParsedRootInterface = {\n      language: language,\n      translation: splitString[0],\n      englishMeaning: getWordsInQuotes(dataString),\n    };\n\n    switch (language) {\n      case \"ancient greek\":\n        if ([\"Att\"].includes(splitString[0])) {\n           languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"attic greek\",\n          }\n        }\n\n        if ([\"Pamphylian\"].includes(splitString[0])) {\n           languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"pamphylian\",\n          }\n        }\n\n        if ([\"Doric\"].includes(splitString[0])) {\n           languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"doric\",\n          }\n        }\n\n        if ([\"Myc\", \"MycGr\"].includes(splitString[0])) {\n           languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"mycenaean\",\n          }\n        }\n\n        if ([\"Homeric\"].includes(splitString[0])) {\n           languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"homeric greek\",\n          }\n        }\n\n        break;\n\n      case \"albanian\":\n        if ([\"Gheg\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"albanian (gheg)\",\n          }\n        }\n\n        if ([\"OldTosk\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"albanian (old tosk)\",\n          }\n        }\n\n        break;\n\n      case \"armenian\":\n        if ([\"OArm\", \"OldArm\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"classical armenian\",\n          }\n        }\n\n        break;\n\n\n      case \"baltic\":\n        if ([\"OPrus\", \"OP\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old prussian\",\n          }\n        }\n\n        if ([\"Lith\", \"OLith\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"lithuanian\",\n          }\n        }\n\n        if ([\"Latv\", \"Latvian\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"latvian\",\n          }\n        }\n\n        break;\n\n      case \"celtic\":\n        if ([\"Irsh\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"irish\",\n          }\n        }\n\n        if ([\"Celtib\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"celtiberian\",\n          }\n        }\n\n        if ([\"OIr\", \"OI\", \"Old Irish\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old irish\",\n          }\n        }\n\n        if ([\"MIr\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"middle irish\",\n          }\n        }\n\n        if ([\"Gaul\", \"Gaul.\", \"Gaulish\", \"Gau\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"gaulish\",\n          }\n        }\n\n        if ([\"W\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"welsh\",\n          }\n        }\n\n        if ([\"MWel\", \"MW\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"middle welsh\",\n          }\n        }\n\n        if ([\"MBret\", \"Bret\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"breton\",\n          }\n        }\n\n        break;\n\n      case \"english\":\n        if ([\"OE\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old english\",\n          }\n        }\n\n        if ([\"Scot\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"scottish english\",\n          }\n        }\n\n        break;\n\n      case \"gothic\":\n        if ([\"ON\", \"Nor\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old norse\",\n          }\n        }\n\n        if ([\"OHG\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old high german\",\n          }\n        }\n\n        if ([\"Ger\", \"German\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"german\",\n          }\n        }\n\n        if ([\"OldSaxon\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old saxon\",\n          }\n        }\n\n        if ([\"Yiddish\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"yiddish\",\n          }\n        }\n\n        break;\n\n      case \"hittite\":\n        if ([\"Luwian\", \"HLuw\", \"Luw\", \"HierLuv\", \"Luvian\", \"CLuw\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"luwian\",\n          }\n        }\n\n        if ([\"Hitt\", \"Hitt.\", \"Hittite\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"hittite\",\n          }\n        }\n\n        if ([\"Lydian\", \"Lyd\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"lydian\",\n          }\n        }\n\n        if ([ \"Lyc\"].includes(splitString[0])) {\n          languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"lycian\",\n          }\n        }\n\n        break;\n\n      case \"iranian\":\n        if ([\"YAv\", \"Av\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"avestan\",\n          }\n        }\n\n        if ([\"Wakhi\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"Wakhi\",\n          }\n        }\n\n        if ([\"Kurdish\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"kurdish\",\n          }\n        }\n\n        if ([\"Ossetic\", \"Oss\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"ossetian\",\n          }\n        }\n\n        if (splitString[0] === \"Old\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old iranian\",\n            translation: splitString[2],\n          }\n        }\n\n        if (splitString[0] === \"Proto-Iranian\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"proto-iranian\",\n          }\n        }\n\n        if ([\"NPers\", \"Npers\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"dari, new persian\",\n          }\n        }\n\n        if ([\"Persian\", \"Per\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"persian\",\n          }\n        }\n\n        if ([\"OPers\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old persian\",\n          }\n        }\n\n        if ([\"Pash\", \"Past\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"pashto\",\n          }\n        }\n\n        break;\n\n      case \"latin\":\n        if ([\"Osc\", \"Oscan\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"oscan\",\n          }\n        }\n\n        if ([\"Umbrian\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"umbrian\",\n          }\n        }\n\n        break;\n\n      case \"pie\":\n        if (language === \"pie\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            translation: splitString[0],\n            language: \"proto indo european\",\n          }\n        }\n\n        break;\n\n      case \"sanskrit\":\n        if ([\"Ved\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"vedic\",\n          }\n        }\n\n        break;\n\n      case \"slavic\":\n        if ([\"OCS\", \"OSl\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old church slavonic\",\n          }\n        }\n\n        if ([\"OldSorbian\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old sorbian\",\n          }\n        }\n\n        if ([\"Russ\", \"Russ.\", \"Russian\", \"Rus\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"russian\",\n          }\n        }\n\n        if ([\"Croatian\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"croatian\",\n          }\n        }\n\n        if ([\"Czech\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"czech\",\n          }\n        }\n\n        if ([\"OBulg\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"old bulgarian\",\n          }\n        }\n\n        if ([\"Bulg\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"bulgarian\",\n          }\n        }\n\n        if ([\"MBulg\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"middle bulgarian\",\n          }\n        }\n\n        if ([\"Ukr\", \"Ukrainian\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"ukranian\",\n          }\n        }\n\n        if ([\"Pol\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"polish\",\n          }\n        }\n\n        break;\n\n      case \"tocharian\":\n        if (splitString[0] === \"A\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"tocharian A\",\n          }\n        }\n\n        if (splitString[0] === \"B\") {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"tocharian B\",\n          }\n        }\n\n        if ([\"AB\", \"A/B\"].includes(splitString[0])) {\n          languageAndWord = languageAndWord = {\n            ...defaultLanguageAndWord,\n            language: \"tocharian A/B\",\n          }\n        }\n\n        break;\n\n      default:\n        languageAndWord = {\n          language: language,\n          translation: splitString[0],\n          englishMeaning: getWordsInQuotes(dataString),\n        };\n\n        break;\n    }\n\n    return {\n      language: removeExtraChars(languageAndWord.language),\n      translation: removeExtraChars(languageAndWord.translation),\n      // translation: removeExtraChars(languageAndWord.translation).toLowerCase(),\n      englishMeaning: languageAndWord.englishMeaning,\n    };\n  }\n\n  return undefined;\n};\n\nexport default parseDataString;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}