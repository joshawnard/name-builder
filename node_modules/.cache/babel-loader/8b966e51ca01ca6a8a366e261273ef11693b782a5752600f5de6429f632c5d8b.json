{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    selectedWords\n  } = useContext(NameGeneratorContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneratorOutput, \"c4vNfki0qWzfuBjM8AK8DZwwLmo=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","NameGeneratorContext","GeneratorOutput","selectedWords"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst GeneratorOutput = () => {\n  const { selectedWords } = useContext(NameGeneratorContext);\n\n  return (\n    <div>\n      {/*{*/}\n      {/*  Object.entries(selectedWords).map((selectedWord) => {*/}\n      {/*    const type = selectedWord[0]; // kinship*/}\n      {/*    const list = selectedWord[1]; // [\"mother\"]*/}\n\n      {/*    if (list.length) {*/}\n      {/*      return (*/}\n      {/*        <>*/}\n      {/*          {*/}\n      {/*            list.map((word) => {*/}\n      {/*              // TODO: Make sense of all this; maybe I don't even need it*/}\n      {/*              if (roots[type]) {*/}\n      {/*                return Object.entries(roots[type]).map((wordName) => {*/}\n      {/*                  // const engWord = wordName[0];*/}\n      {/*                  const translationObj = wordName[1];*/}\n\n      {/*                  return Object.entries(translationObj).map((langWord) => {*/}\n      {/*                    return (*/}\n      {/*                      <div key={langWord[0]}>*/}\n      {/*                        <h3>{word}</h3>*/}\n\n      {/*                        {*/}\n      {/*                          Object.entries(langWord[1]).map((foo) => {*/}\n      {/*                            return (*/}\n      {/*                              <div key={foo[0]}>*/}\n      {/*                                {*/}\n      {/*                                  foo[1] && foo[1].length && (*/}\n      {/*                                    <div>*/}\n      {/*                                      {foo[1][0]}, {foo[0]}*/}\n      {/*                                    </div>*/}\n      {/*                                  )*/}\n      {/*                                }*/}\n      {/*                              </div>*/}\n      {/*                            );*/}\n      {/*                          })*/}\n      {/*                        }*/}\n      {/*                      </div>*/}\n      {/*                    );*/}\n      {/*                  })*/}\n      {/*                })*/}\n      {/*              }*/}\n      {/*            })*/}\n      {/*          }*/}\n      {/*        </>*/}\n      {/*      );*/}\n      {/*    }*/}\n      {/*  })*/}\n      {/*}*/}\n    </div>\n  );\n};\n\nexport default GeneratorOutput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,oBAAoB,MAAM,yBAAyB;;AAE1D;AACA;AAAA;AAEA,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM;IAAEC;EAAc,CAAC,GAAGH,UAAU,CAACC,oBAAoB,CAAC;EAE1D,oBACE;IAAA;IAAA;IAAA;EAAA,QAiDM;AAEV,CAAC;AAAC,GAvDIC,eAAe;AAAA,KAAfA,eAAe;AAyDrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}