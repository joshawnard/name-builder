{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    selectedWords\n  } = useContext(NameGeneratorContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(selectedWords).map(selectedWord => {\n      const type = selectedWord[0]; // kinship\n      const list = selectedWord[1]; // [\"mother\"]\n\n      if (list.length) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: list.map(word => {\n            // TODO: Make sense of all this; maybe I don't even need it\n            if (roots[type]) {\n              return Object.entries(roots[type]).map(wordName => {\n                // const engWord = wordName[0];\n                const translationObj = wordName[1];\n                return Object.entries(translationObj).map(langWord => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                      children: word\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 32,\n                      columnNumber: 31\n                    }, this), Object.entries(langWord[1]).map(foo => {\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: foo[1] && foo[1].length && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [foo[1][0], \", \", foo[0]]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 40,\n                          columnNumber: 43\n                        }, this)\n                      }, foo[0], false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 37,\n                        columnNumber: 37\n                      }, this);\n                    })]\n                  }, langWord[0], true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 31,\n                    columnNumber: 29\n                  }, this);\n                });\n              });\n            }\n          })\n        }, void 0, false);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneratorOutput, \"c4vNfki0qWzfuBjM8AK8DZwwLmo=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","NameGeneratorContext","GeneratorOutput","selectedWords","Object","entries","map","selectedWord","type","list","length","word","roots","wordName","translationObj","langWord","foo"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst GeneratorOutput = () => {\n  const { selectedWords } = useContext(NameGeneratorContext);\n\n\n  return (\n    <div>\n      {\n        Object.entries(selectedWords).map((selectedWord) => {\n          const type = selectedWord[0]; // kinship\n          const list = selectedWord[1]; // [\"mother\"]\n\n          if (list.length) {\n            return (\n              <>\n                {\n                  list.map((word) => {\n                    // TODO: Make sense of all this; maybe I don't even need it\n                    if (roots[type]) {\n                      return Object.entries(roots[type]).map((wordName) => {\n                        // const engWord = wordName[0];\n                        const translationObj = wordName[1];\n\n                        return Object.entries(translationObj).map((langWord) => {\n                          return (\n                            <div key={langWord[0]}>\n                              <h3>{word}</h3>\n\n                              {\n                                Object.entries(langWord[1]).map((foo) => {\n                                  return (\n                                    <div key={foo[0]}>\n                                      {\n                                        foo[1] && foo[1].length && (\n                                          <div>\n                                            {foo[1][0]}, {foo[0]}\n                                          </div>\n                                        )\n                                      }\n                                    </div>\n                                  );\n                                })\n                              }\n                            </div>\n                          );\n                        })\n                      })\n                    }\n                  })\n                }\n              </>\n            );\n          }\n        })\n      }\n    </div>\n  );\n};\n\nexport default GeneratorOutput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,oBAAoB,MAAM,yBAAyB;;AAE1D;AACA;AAAA;AAAA;AAEA,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM;IAAEC;EAAc,CAAC,GAAGH,UAAU,CAACC,oBAAoB,CAAC;EAG1D,oBACE;IAAA,UAEIG,MAAM,CAACC,OAAO,CAACF,aAAa,CAAC,CAACG,GAAG,CAAEC,YAAY,IAAK;MAClD,MAAMC,IAAI,GAAGD,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9B,MAAME,IAAI,GAAGF,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE9B,IAAIE,IAAI,CAACC,MAAM,EAAE;QACf,oBACE;UAAA,UAEID,IAAI,CAACH,GAAG,CAAEK,IAAI,IAAK;YACjB;YACA,IAAIC,KAAK,CAACJ,IAAI,CAAC,EAAE;cACf,OAAOJ,MAAM,CAACC,OAAO,CAACO,KAAK,CAACJ,IAAI,CAAC,CAAC,CAACF,GAAG,CAAEO,QAAQ,IAAK;gBACnD;gBACA,MAAMC,cAAc,GAAGD,QAAQ,CAAC,CAAC,CAAC;gBAElC,OAAOT,MAAM,CAACC,OAAO,CAACS,cAAc,CAAC,CAACR,GAAG,CAAES,QAAQ,IAAK;kBACtD,oBACE;oBAAA,wBACE;sBAAA,UAAKJ;oBAAI;sBAAA;sBAAA;sBAAA;oBAAA,QAAM,EAGbP,MAAM,CAACC,OAAO,CAACU,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACT,GAAG,CAAEU,GAAG,IAAK;sBACvC,oBACE;wBAAA,UAEIA,GAAG,CAAC,CAAC,CAAC,IAAIA,GAAG,CAAC,CAAC,CAAC,CAACN,MAAM,iBACrB;0BAAA,WACGM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAE,EAACA,GAAG,CAAC,CAAC,CAAC;wBAAA;0BAAA;0BAAA;0BAAA;wBAAA;sBAEvB,GANKA,GAAG,CAAC,CAAC,CAAC;wBAAA;wBAAA;wBAAA;sBAAA,QAQV;oBAEV,CAAC,CAAC;kBAAA,GAhBID,QAAQ,CAAC,CAAC,CAAC;oBAAA;oBAAA;oBAAA;kBAAA,QAkBf;gBAEV,CAAC,CAAC;cACJ,CAAC,CAAC;YACJ;UACF,CAAC;QAAC,iBAEH;MAEP;IACF,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QAEA;AAEV,CAAC;AAAC,GAxDIb,eAAe;AAAA,KAAfA,eAAe;AA0DrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}