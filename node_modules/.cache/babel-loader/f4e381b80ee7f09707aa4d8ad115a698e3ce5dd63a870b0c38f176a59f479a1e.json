{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    rootWordsObj,\n    selectedWords\n  } = useContext(NameGeneratorContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(selectedWords).map(selectedWord => {\n      const type = selectedWord[0]; // kinship\n      const list = selectedWord[1]; // [\"mother\"]\n\n      if (list.length) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: list.map(word => {\n            const theOne = rootWordsObj[type].find(rootWordObj => {\n              var _rootWordObj$english;\n              return (_rootWordObj$english = rootWordObj.english) === null || _rootWordObj$english === void 0 ? void 0 : _rootWordObj$english.includes(word);\n            });\n            if (theOne) {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: word\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 30,\n                  columnNumber: 27\n                }, this), Object.entries(theOne).map(entry => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: entry[0]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 36,\n                      columnNumber: 35\n                    }, this), \":\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: entry[1]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 37,\n                      columnNumber: 35\n                    }, this)]\n                  }, entry[0], true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 35,\n                    columnNumber: 33\n                  }, this);\n                })]\n              }, void 0, true);\n            }\n            return null;\n          })\n        }, void 0, false);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneratorOutput, \"t3BFoneH8GGetyxUCLHNDbgzoB4=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","NameGeneratorContext","GeneratorOutput","rootWordsObj","selectedWords","Object","entries","map","selectedWord","type","list","length","word","theOne","find","rootWordObj","english","includes","entry"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst GeneratorOutput = () => {\n  const { rootWordsObj, selectedWords } = useContext(NameGeneratorContext);\n\n\n  return (\n    <div>\n      {\n        Object.entries(selectedWords).map((selectedWord) => {\n          const type = selectedWord[0]; // kinship\n          const list = selectedWord[1]; // [\"mother\"]\n\n          if (list.length) {\n            return (\n              <>\n                {\n                  list.map((word) => {\n                    const theOne = rootWordsObj[type].find((rootWordObj) => {\n                      return rootWordObj.english?.includes(word);\n                    });\n\n                    if (theOne) {\n                      return (\n                        <>\n                          <h3>{word}</h3>\n\n                          {\n                            Object.entries(theOne).map((entry) => {\n                              return (\n                                <div key={entry[0]}>\n                                  <span>{entry[0]}</span>:\n                                  <span>{entry[1]}</span>\n                                </div>\n                              );\n                            })\n                          }\n                        </>\n                      );\n                    }\n\n                    return null;\n                  })\n                }\n              </>\n            );\n          }\n        })\n      }\n    </div>\n  );\n};\n\nexport default GeneratorOutput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,oBAAoB,MAAM,yBAAyB;;AAE1D;AACA;AAAA;AAAA;AAEA,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM;IAAEC,YAAY;IAAEC;EAAc,CAAC,GAAGJ,UAAU,CAACC,oBAAoB,CAAC;EAGxE,oBACE;IAAA,UAEII,MAAM,CAACC,OAAO,CAACF,aAAa,CAAC,CAACG,GAAG,CAAEC,YAAY,IAAK;MAClD,MAAMC,IAAI,GAAGD,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9B,MAAME,IAAI,GAAGF,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE9B,IAAIE,IAAI,CAACC,MAAM,EAAE;QACf,oBACE;UAAA,UAEID,IAAI,CAACH,GAAG,CAAEK,IAAI,IAAK;YACjB,MAAMC,MAAM,GAAGV,YAAY,CAACM,IAAI,CAAC,CAACK,IAAI,CAAEC,WAAW,IAAK;cAAA;cACtD,+BAAOA,WAAW,CAACC,OAAO,yDAAnB,qBAAqBC,QAAQ,CAACL,IAAI,CAAC;YAC5C,CAAC,CAAC;YAEF,IAAIC,MAAM,EAAE;cACV,oBACE;gBAAA,wBACE;kBAAA,UAAKD;gBAAI;kBAAA;kBAAA;kBAAA;gBAAA,QAAM,EAGbP,MAAM,CAACC,OAAO,CAACO,MAAM,CAAC,CAACN,GAAG,CAAEW,KAAK,IAAK;kBACpC,oBACE;oBAAA,wBACE;sBAAA,UAAOA,KAAK,CAAC,CAAC;oBAAC;sBAAA;sBAAA;sBAAA;oBAAA,QAAQ,KACvB;sBAAA,UAAOA,KAAK,CAAC,CAAC;oBAAC;sBAAA;sBAAA;sBAAA;oBAAA,QAAQ;kBAAA,GAFfA,KAAK,CAAC,CAAC,CAAC;oBAAA;oBAAA;oBAAA;kBAAA,QAGZ;gBAEV,CAAC,CAAC;cAAA,gBAEH;YAEP;YAEA,OAAO,IAAI;UACb,CAAC;QAAC,iBAEH;MAEP;IACF,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QAEA;AAEV,CAAC;AAAC,GAjDIhB,eAAe;AAAA,KAAfA,eAAe;AAmDrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}