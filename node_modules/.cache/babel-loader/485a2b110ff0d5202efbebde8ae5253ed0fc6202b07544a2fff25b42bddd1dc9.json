{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport formatSelectedWords from \"../utils/formatSelectedWords\";\nimport renderFormattedWords from '../utils/renderFormattedWords';\n\n// TODO:\n// Add randomizer that constructs multiple roots together\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    rootWordsObj,\n    selectedWords\n  } = useContext(NameGeneratorContext);\n  const [formattedWordStructures, setFormattedWordStructures] = useState(formatSelectedWords(selectedWords, rootWordsObj));\n  const [generatedNames, setGeneratedNames] = useState([]);\n  useEffect(() => {\n    setFormattedWordStructures(formatSelectedWords(selectedWords, rootWordsObj));\n  }, [rootWordsObj, selectedWords]);\n  useEffect(() => {\n    setGeneratedNames(() => {\n      if (formattedWordStructures && formattedWordStructures[0]) {\n        let generated = [];\n        const structures = formattedWordStructures.flat();\n        const numNames = 1000;\n        Array.from(Array(numNames)).forEach(time => {\n          let numOfRoots = Math.floor(Math.random() * structures.length);\n          if (numOfRoots < 2) {\n            numOfRoots = 2;\n          }\n          if (numOfRoots > 3) {\n            numOfRoots = 3;\n          }\n          let nameKey = \"\";\n          let rootsArr = [];\n          for (let i = 0; i < numOfRoots; i++) {\n            const randomStructureIndex = Math.floor(Math.random() * structures.length);\n            const randomStructure = structures[randomStructureIndex];\n            if (randomStructure) {\n              const translationList = Object.entries(randomStructure).map(entry => {\n                return entry[1].filter(element => {\n                  return element !== undefined;\n                });\n              })[0];\n              const randomTranslationIndex = Math.floor(Math.random() * (translationList.length - 1));\n              const translationObj = translationList[randomTranslationIndex];\n              nameKey += (translationObj === null || translationObj === void 0 ? void 0 : translationObj.translation.replaceAll(/[$;,(?*-]/g, \"\")) || \"\";\n              rootsArr.push(translationObj);\n            }\n          }\n          const alreadyExists = !!generated.find(obj => Object.keys(obj)[0] === nameKey);\n          if (!alreadyExists) {\n            generated.push({\n              [nameKey]: rootsArr\n            });\n          }\n        });\n        return generated;\n      }\n      return [];\n    });\n  }, [formattedWordStructures, selectedWords]);\n  const renderGenerated = () => {\n    if (generatedNames.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Names generated: \", generatedNames.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), generatedNames.map(generatedNameObj => {\n          const name = Object.keys(generatedNameObj)[0];\n          const rootArr = Object.values(generatedNameObj)[0];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"name-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n              style: {\n                margin: \"10px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this), rootArr.map((root, index) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {\n                    marginBottom: \"5px\"\n                  },\n                  children: root.language\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: root.translation\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 113,\n                    columnNumber: 29\n                  }, this), \" - \", /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: root.englishMeaning\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 113,\n                    columnNumber: 67\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 27\n                }, this)]\n              }, `${name}-${root.translation}-${index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 25\n              }, this);\n            })]\n          }, name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"generated\",\n    children: [renderFormattedWords(formattedWordStructures), /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        margin: \"1rem 0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), renderGenerated()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneratorOutput, \"yDCT4if+w/C7h9blcJBP39Y6gHQ=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","useEffect","useState","NameGeneratorContext","formatSelectedWords","renderFormattedWords","GeneratorOutput","rootWordsObj","selectedWords","formattedWordStructures","setFormattedWordStructures","generatedNames","setGeneratedNames","generated","structures","flat","numNames","Array","from","forEach","time","numOfRoots","Math","floor","random","length","nameKey","rootsArr","i","randomStructureIndex","randomStructure","translationList","Object","entries","map","entry","filter","element","undefined","randomTranslationIndex","translationObj","translation","replaceAll","push","alreadyExists","find","obj","keys","renderGenerated","generatedNameObj","name","rootArr","values","margin","root","index","marginBottom","language","englishMeaning"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport formatSelectedWords from \"../utils/formatSelectedWords\";\nimport { GeneratedName, ParsedRootInterface } from \"../interfaces/rootWordInterface\";\nimport renderFormattedWords from '../utils/renderFormattedWords';\n\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst GeneratorOutput = () => {\n  const { rootWordsObj, selectedWords } = useContext(NameGeneratorContext);\n  const [formattedWordStructures, setFormattedWordStructures] = useState(\n    formatSelectedWords(selectedWords, rootWordsObj),\n  );\n  const [generatedNames, setGeneratedNames] = useState<GeneratedName[]>([]);\n\n  useEffect(() => {\n    setFormattedWordStructures(\n      formatSelectedWords(selectedWords, rootWordsObj),\n    );\n  }, [rootWordsObj, selectedWords])\n\n  useEffect(() => {\n    setGeneratedNames(() => {\n      if (formattedWordStructures && formattedWordStructures[0]) {\n        let generated: { [key: string]: ParsedRootInterface[] }[] = [];\n        const structures = formattedWordStructures.flat();\n\n        const numNames = 1000;\n        Array.from(Array(numNames)).forEach((time) => {\n          let numOfRoots = Math.floor(Math.random() * (structures.length));\n          if (numOfRoots < 2) {\n            numOfRoots = 2;\n          }\n          if (numOfRoots > 3) {\n            numOfRoots = 3;\n          }\n\n          let nameKey = \"\";\n          let rootsArr: ParsedRootInterface[] = [];\n\n          for (let i = 0; i < numOfRoots; i++) {\n            const randomStructureIndex = Math.floor(Math.random() * (structures.length));\n            const randomStructure = structures[randomStructureIndex];\n\n            if (randomStructure) {\n              const translationList = Object.entries(randomStructure).map((entry) => {\n                return entry[1].filter((element) => {\n                  return element !== undefined;\n                });\n              })[0]\n\n              const randomTranslationIndex = Math.floor(Math.random() * (translationList.length - 1));\n              const translationObj = translationList[randomTranslationIndex];\n\n              nameKey += translationObj?.translation.replaceAll(/[$;,(?*-]/g, \"\") || \"\";\n              rootsArr.push(translationObj as ParsedRootInterface);\n            }\n          }\n\n          const alreadyExists = !!generated.find((obj) => Object.keys(obj)[0] === nameKey);\n          if (!alreadyExists) {\n            generated.push({\n              [nameKey]: rootsArr,\n            });\n          }\n        })\n\n        return generated;\n      }\n\n      return [];\n    });\n  }, [formattedWordStructures, selectedWords])\n\n\n\n  const renderGenerated = (): JSX.Element | null => {\n    if (generatedNames.length) {\n      return (\n        <div>\n          <h2>\n            Names generated: {generatedNames.length}\n          </h2>\n\n          {\n            generatedNames.map((generatedNameObj) => {\n              const name = Object.keys(generatedNameObj)[0];\n              const rootArr = Object.values(generatedNameObj)[0];\n\n              return (\n                <div\n                  className=\"name-card\"\n                  key={name}\n                >\n                  <h3>\n                    {name}\n                  </h3>\n\n                  <hr style={{ margin: \"10px\" }} />\n\n                  {\n                    rootArr.map((root, index) => {\n                      return (\n                        <div\n                          key={`${name}-${root.translation}-${index}`}\n                        >\n                          <h4 style={{ marginBottom: \"5px\" }}>\n                            {root.language}\n                          </h4>\n\n                          <small>\n                            <strong>{root.translation}</strong> - <em>{root.englishMeaning}</em>\n                          </small>\n                        </div>\n                      );\n                    })\n                  }\n                </div>\n              );\n            })\n          }\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <div className=\"generated\">\n      {renderFormattedWords(formattedWordStructures)}\n\n      <hr style={{ margin: \"1rem 0\" }} />\n\n      {renderGenerated()}\n    </div>\n  );\n};\n\nexport default GeneratorOutput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}