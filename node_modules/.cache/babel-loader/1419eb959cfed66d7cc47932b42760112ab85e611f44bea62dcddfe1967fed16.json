{"ast":null,"code":"import parseDataString from \"./parseDataString\";\nconst formatSelectedWords = (selectedWords, rootWordsObj) => {\n  const selectedEntries = Object.entries(selectedWords);\n  if (selectedEntries.length) {\n    return Object.entries(selectedWords).map(selectedWord => {\n      const type = selectedWord[0];\n      const list = selectedWord[1];\n      if (list.length) {\n        return list.map(word => {\n          const theOne = rootWordsObj[type].find(rootWordObj => {\n            var _rootWordObj$english;\n            return (_rootWordObj$english = rootWordObj.english) === null || _rootWordObj$english === void 0 ? void 0 : _rootWordObj$english.includes(word);\n          });\n          if (theOne) {\n            return {\n              [word]: Object.entries(theOne).map(entry => {\n                const parsedWordAndLanguage = parseDataString(entry[1], entry[0]);\n                if (parsedWordAndLanguage) {\n                  return parsedWordAndLanguage;\n                }\n                return undefined;\n              })\n            };\n          }\n          return undefined;\n        });\n      }\n      return undefined;\n    }).filter(value => {\n      // filters out undefined; breaks render name generator\n      return !!value;\n    });\n  }\n  return [];\n};\nexport default formatSelectedWords;","map":{"version":3,"names":["parseDataString","formatSelectedWords","selectedWords","rootWordsObj","selectedEntries","Object","entries","length","map","selectedWord","type","list","word","theOne","find","rootWordObj","english","includes","entry","parsedWordAndLanguage","undefined","filter","value"],"sources":["/Users/jard/Desktop/code/name-generator/src/utils/formatSelectedWords.ts"],"sourcesContent":["import { SelectedWordsInterface } from \"../types/selectedWords\";\nimport { FormattedWordStructures, RootWordsObjInterface } from \"../interfaces/rootWordInterface\";\nimport parseDataString from \"./parseDataString\";\n\nconst formatSelectedWords = (\n  selectedWords: SelectedWordsInterface,\n  rootWordsObj: RootWordsObjInterface,\n): FormattedWordStructures => {\n  const selectedEntries = Object.entries(selectedWords);\n\n  if (selectedEntries.length) {\n    return Object.entries(selectedWords).map((selectedWord) => {\n      const type = selectedWord[0];\n      const list = selectedWord[1];\n\n      if (list.length) {\n        return list.map((word) => {\n          const theOne = rootWordsObj[type].find((rootWordObj) => {\n            return rootWordObj.english?.includes(word);\n          });\n\n          if (theOne) {\n            return {\n              [word]: Object.entries(theOne).map((entry) => {\n                const parsedWordAndLanguage = parseDataString(entry[1], entry[0]);\n\n                if (parsedWordAndLanguage) {\n                  return parsedWordAndLanguage;\n                }\n\n                return undefined;\n              }),\n            };\n          }\n\n          return undefined;\n        })\n      }\n\n      return undefined;\n    })\n    .filter((value) => {\n      // filters out undefined; breaks render name generator\n      return !!value;\n    });\n  }\n\n  return [];\n};\n\nexport default formatSelectedWords;"],"mappings":"AAEA,OAAOA,eAAe,MAAM,mBAAmB;AAE/C,MAAMC,mBAAmB,GAAG,CAC1BC,aAAqC,EACrCC,YAAmC,KACP;EAC5B,MAAMC,eAAe,GAAGC,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC;EAErD,IAAIE,eAAe,CAACG,MAAM,EAAE;IAC1B,OAAOF,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC,CAACM,GAAG,CAAEC,YAAY,IAAK;MACzD,MAAMC,IAAI,GAAGD,YAAY,CAAC,CAAC,CAAC;MAC5B,MAAME,IAAI,GAAGF,YAAY,CAAC,CAAC,CAAC;MAE5B,IAAIE,IAAI,CAACJ,MAAM,EAAE;QACf,OAAOI,IAAI,CAACH,GAAG,CAAEI,IAAI,IAAK;UACxB,MAAMC,MAAM,GAAGV,YAAY,CAACO,IAAI,CAAC,CAACI,IAAI,CAAEC,WAAW,IAAK;YAAA;YACtD,+BAAOA,WAAW,CAACC,OAAO,yDAAnB,qBAAqBC,QAAQ,CAACL,IAAI,CAAC;UAC5C,CAAC,CAAC;UAEF,IAAIC,MAAM,EAAE;YACV,OAAO;cACL,CAACD,IAAI,GAAGP,MAAM,CAACC,OAAO,CAACO,MAAM,CAAC,CAACL,GAAG,CAAEU,KAAK,IAAK;gBAC5C,MAAMC,qBAAqB,GAAGnB,eAAe,CAACkB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEjE,IAAIC,qBAAqB,EAAE;kBACzB,OAAOA,qBAAqB;gBAC9B;gBAEA,OAAOC,SAAS;cAClB,CAAC;YACH,CAAC;UACH;UAEA,OAAOA,SAAS;QAClB,CAAC,CAAC;MACJ;MAEA,OAAOA,SAAS;IAClB,CAAC,CAAC,CACDC,MAAM,CAAEC,KAAK,IAAK;MACjB;MACA,OAAO,CAAC,CAACA,KAAK;IAChB,CAAC,CAAC;EACJ;EAEA,OAAO,EAAE;AACX,CAAC;AAED,eAAerB,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}