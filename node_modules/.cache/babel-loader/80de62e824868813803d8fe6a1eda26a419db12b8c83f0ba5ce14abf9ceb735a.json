{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst parseDataString = (dataString, language) => {\n  if (dataString) {\n    const splitString = dataString.split(\" \");\n    let languageAndWord = [language, splitString[0], splitString[2]];\n    switch (language) {\n      case \"baltic\":\n        if (splitString[0] === \"OPrus\") {\n          languageAndWord = [\"old prussian\", splitString[1], splitString[2]];\n        }\n        break;\n      case \"celtic\":\n        if (splitString[0] === \"OIr\") {\n          languageAndWord = [\"old irish\", splitString[1], splitString[2]];\n        }\n        break;\n      case \"slavic\":\n        if (splitString[0] === \"OCS\") {\n          languageAndWord = [\"old church slavonic\", splitString[1], splitString[2]];\n        }\n        break;\n      case \"tocharian\":\n        if (splitString[0] === \"A\") {\n          languageAndWord = [\"tocharian A\", splitString[1], splitString[2]];\n        }\n        break;\n      default:\n        languageAndWord = [language, splitString[0], splitString[2]];\n        break;\n    }\n    return languageAndWord;\n  }\n  return undefined;\n};\nconst formatSelectedWords = (selectedWords, rootWordsObj) => {\n  const selectedEntries = Object.entries(selectedWords);\n  if (selectedEntries.length) {\n    return Object.entries(selectedWords).map(selectedWord => {\n      const type = selectedWord[0];\n      const list = selectedWord[1];\n      if (list.length) {\n        return list.map(word => {\n          const theOne = rootWordsObj[type].find(rootWordObj => {\n            var _rootWordObj$english;\n            return (_rootWordObj$english = rootWordObj.english) === null || _rootWordObj$english === void 0 ? void 0 : _rootWordObj$english.includes(word);\n          });\n          if (theOne) {\n            return {\n              [word]: Object.entries(theOne).map(entry => {\n                const parsedWordAndLanguage = parseDataString(entry[1], entry[0]);\n                if (parsedWordAndLanguage) {\n                  return parsedWordAndLanguage;\n                }\n              })\n            };\n          }\n        });\n      }\n    });\n  }\n  return null;\n};\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    rootWordsObj,\n    selectedWords\n  } = useContext(NameGeneratorContext);\n  const [formattedWordStructures, setFormattedWordStructures] = useState(formatSelectedWords(selectedWords, rootWordsObj));\n  const renderSelectedWords = () => {\n    return Object.entries(selectedWords).map(selectedWord => {\n      const type = selectedWord[0];\n      const list = selectedWord[1];\n      if (list.length) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: list.map(word => {\n            const theOne = rootWordsObj[type].find(rootWordObj => {\n              var _rootWordObj$english2;\n              return (_rootWordObj$english2 = rootWordObj.english) === null || _rootWordObj$english2 === void 0 ? void 0 : _rootWordObj$english2.includes(word);\n            });\n            if (theOne) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: word\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 23\n                }, this), Object.entries(theOne).map(entry => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: /*#__PURE__*/_jsxDEV(\"b\", {\n                        children: entry[0]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 146,\n                        columnNumber: 37\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 146,\n                      columnNumber: 31\n                    }, this), \":\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: entry[1]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 148,\n                      columnNumber: 31\n                    }, this)]\n                  }, entry[0], true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 145,\n                    columnNumber: 29\n                  }, this);\n                })]\n              }, word, true, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 21\n              }, this);\n            }\n            return null;\n          })\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this);\n      }\n    });\n  };\n  const renderFormattedWords = () => {\n    const formatted = formatSelectedWords();\n    if (formatted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formatted.map(formattedWord => {\n          if (formattedWord) {\n            return formattedWord.map(word => {\n              if (word) {\n                return Object.entries(word).map(list => {\n                  const englishWord = list[0];\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                      children: englishWord\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 182,\n                      columnNumber: 27\n                    }, this), list[1].map(wordArr => {\n                      if (wordArr) {\n                        const [lang, translation, engMeaning] = wordArr;\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            children: [lang, \":\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 193,\n                            columnNumber: 37\n                          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: translation\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 197,\n                            columnNumber: 37\n                          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: engMeaning\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 201,\n                            columnNumber: 37\n                          }, this)]\n                        }, translation, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 192,\n                          columnNumber: 35\n                        }, this);\n                      }\n                    })]\n                  }, englishWord, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 25\n                  }, this);\n                });\n              }\n            });\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderFormattedWords()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneratorOutput, \"rCTAvf84GtlNyJ5zk9V4RU30g64=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","useState","NameGeneratorContext","parseDataString","dataString","language","splitString","split","languageAndWord","undefined","formatSelectedWords","selectedWords","rootWordsObj","selectedEntries","Object","entries","length","map","selectedWord","type","list","word","theOne","find","rootWordObj","english","includes","entry","parsedWordAndLanguage","GeneratorOutput","formattedWordStructures","setFormattedWordStructures","renderSelectedWords","renderFormattedWords","formatted","formattedWord","englishWord","wordArr","lang","translation","engMeaning"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport { SelectedWordsInterface } from \"../types/selectedWords\";\nimport { RootWordsObjInterface } from \"../interfaces/rootWordInterface\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst parseDataString = (\n  dataString: string | undefined,\n  language: string,\n): [\n  string, // language\n  string, // word\n  string, // english meaning\n] | undefined => {\n  if (dataString) {\n   const splitString = dataString.split(\" \");\n   let languageAndWord: [string, string, string] = [\n     language,\n     splitString[0],\n     splitString[2],\n   ];\n\n   switch(language) {\n     case \"baltic\":\n       if (splitString[0] === \"OPrus\") {\n         languageAndWord = [\n           \"old prussian\",\n           splitString[1],\n           splitString[2]\n         ];\n       }\n       break;\n\n     case \"celtic\":\n       if (splitString[0] === \"OIr\") {\n         languageAndWord = [\n           \"old irish\",\n           splitString[1],\n           splitString[2]\n         ];\n       }\n       break;\n\n     case \"slavic\":\n       if (splitString[0] === \"OCS\") {\n         languageAndWord = [\n           \"old church slavonic\",\n           splitString[1],\n           splitString[2],\n         ];\n       }\n       break;\n\n     case \"tocharian\":\n       if (splitString[0] === \"A\") {\n         languageAndWord = [\n           \"tocharian A\",\n           splitString[1],\n           splitString[2],\n         ];\n       }\n       break;\n\n     default:\n       languageAndWord = [\n         language,\n         splitString[0],\n         splitString[2],\n       ]\n       break;\n   }\n\n    return languageAndWord;\n  }\n\n  return undefined;\n};\n\nconst formatSelectedWords = (\n  selectedWords: SelectedWordsInterface,\n  rootWordsObj: RootWordsObjInterface,\n) => {\n  const selectedEntries = Object.entries(selectedWords);\n\n  if (selectedEntries.length) {\n    return Object.entries(selectedWords).map((selectedWord) => {\n      const type = selectedWord[0];\n      const list = selectedWord[1];\n\n      if (list.length) {\n        return list.map((word) => {\n          const theOne = rootWordsObj[type].find((rootWordObj) => {\n            return rootWordObj.english?.includes(word);\n          });\n\n          if (theOne) {\n            return {\n              [word]: Object.entries(theOne).map((entry) => {\n                const parsedWordAndLanguage = parseDataString(entry[1], entry[0]);\n\n                if (parsedWordAndLanguage) {\n                  return parsedWordAndLanguage;\n                }\n              }),\n            };\n          }\n        })\n      }\n    });\n  }\n\n  return null;\n};\n\nconst GeneratorOutput = () => {\n  const { rootWordsObj, selectedWords } = useContext(NameGeneratorContext);\n  const [formattedWordStructures, setFormattedWordStructures] = useState(\n    formatSelectedWords(selectedWords, rootWordsObj),\n  );\n\n  const renderSelectedWords = () => {\n    return Object.entries(selectedWords).map((selectedWord) => {\n      const type = selectedWord[0];\n      const list = selectedWord[1];\n\n      if (list.length) {\n        return (\n          <div key={type}>\n            {\n              list.map((word) => {\n                const theOne = rootWordsObj[type].find((rootWordObj) => {\n                  return rootWordObj.english?.includes(word);\n                });\n\n                if (theOne) {\n                  return (\n                    <div key={word}>\n                      <h3>{word}</h3>\n\n                      {\n                        Object.entries(theOne).map((entry) => {\n                          return (\n                            <div key={entry[0]}>\n                              <span><b>{entry[0]}</b></span>:\n                              {' '}\n                              <span>{entry[1]}</span>\n                            </div>\n                          );\n                        })\n                      }\n                    </div>\n                  );\n                }\n\n                return null;\n              })\n            }\n          </div>\n        );\n      }\n    })\n  };\n\n  const renderFormattedWords = (): JSX.Element | null => {\n    const formatted = formatSelectedWords();\n\n    if (formatted) {\n      return (\n        <div>\n          {\n            formatted.map((formattedWord) => {\n              if (formattedWord) {\n                return formattedWord.map((word) => {\n                  if (word) {\n                    return Object.entries(word).map((list) => {\n                      const englishWord = list[0];\n\n                      return (\n                        <div key={englishWord}>\n                          <h4>\n                            {englishWord}\n                          </h4>\n\n                          {\n                            list[1].map((wordArr) => {\n                              if (wordArr) {\n                                const [lang, translation, engMeaning] = wordArr;\n\n                                return (\n                                  <div key={translation}>\n                                    <span>\n                                      {lang}:\n                                    </span>\n                                    {' '}\n                                    <span>\n                                      {translation}\n                                    </span>\n                                    {' '}\n                                    <span>\n                                      {engMeaning}\n                                    </span>\n                                  </div>\n                                );\n                              }\n                            })\n                          }\n                        </div>\n                      );\n                    });\n                  }\n                });\n              }\n            })\n          }\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <div>\n      {/*{renderSelectedWords()}*/}\n\n      {renderFormattedWords()}\n    </div>\n  );\n};\n\nexport default GeneratorOutput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}