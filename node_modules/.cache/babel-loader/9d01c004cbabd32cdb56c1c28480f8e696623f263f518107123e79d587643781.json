{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    rootWordsObj,\n    selectedWords\n  } = useContext(NameGeneratorContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(selectedWords).map(selectedWord => {\n      const type = selectedWord[0]; // kinship\n      const list = selectedWord[1]; // [\"mother\"]\n\n      if (list.length) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: list.map(word => {\n            // TODO: Make sense of all this; maybe I don't even need it\n            if (rootWordsObj[type]) {\n              return Object.entries(rootWordsObj[type]).map(wordName => {\n                // const engWord = wordName[0];\n                const translationObj = wordName[1];\n                console.log(translationObj);\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"lameo\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 33,\n                  columnNumber: 27\n                }, this);\n\n                // return Object.entries(translationObj).map((langWord) => {\n                //   return (\n                //     <div key={langWord[0]}>\n                //       <h3>{word}</h3>\n                //\n                //       {\n                //         Object.entries(langWord[1]).map((foo) => {\n                //           return (\n                //             <div key={foo[0]}>\n                //               {\n                //                 foo[1] && foo[1].length && (\n                //                   <div>\n                //                     {foo[1][0]}, {foo[0]}\n                //                   </div>\n                //                 )\n                //               }\n                //             </div>\n                //           );\n                //         })\n                //       }\n                //     </div>\n                //   );\n                // })\n              });\n            }\n          })\n        }, void 0, false);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneratorOutput, \"t3BFoneH8GGetyxUCLHNDbgzoB4=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","NameGeneratorContext","GeneratorOutput","rootWordsObj","selectedWords","Object","entries","map","selectedWord","type","list","length","word","wordName","translationObj","console","log"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport rootWordsObj from \"../root_words/rootWords\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst GeneratorOutput = () => {\n  const { rootWordsObj, selectedWords } = useContext(NameGeneratorContext);\n\n\n  return (\n    <div>\n      {\n        Object.entries(selectedWords).map((selectedWord) => {\n          const type = selectedWord[0]; // kinship\n          const list = selectedWord[1]; // [\"mother\"]\n\n          if (list.length) {\n            return (\n              <>\n                {\n                  list.map((word) => {\n                    // TODO: Make sense of all this; maybe I don't even need it\n                    if (rootWordsObj[type]) {\n                      return Object.entries(rootWordsObj[type]).map((wordName) => {\n                        // const engWord = wordName[0];\n                        const translationObj = wordName[1];\n\n                        console.log(translationObj);\n\n                        return (\n                          <div>\n                            lameo\n                          </div>\n                        );\n\n                        // return Object.entries(translationObj).map((langWord) => {\n                        //   return (\n                        //     <div key={langWord[0]}>\n                        //       <h3>{word}</h3>\n                        //\n                        //       {\n                        //         Object.entries(langWord[1]).map((foo) => {\n                        //           return (\n                        //             <div key={foo[0]}>\n                        //               {\n                        //                 foo[1] && foo[1].length && (\n                        //                   <div>\n                        //                     {foo[1][0]}, {foo[0]}\n                        //                   </div>\n                        //                 )\n                        //               }\n                        //             </div>\n                        //           );\n                        //         })\n                        //       }\n                        //     </div>\n                        //   );\n                        // })\n                      })\n                    }\n                  })\n                }\n              </>\n            );\n          }\n        })\n      }\n    </div>\n  );\n};\n\nexport default GeneratorOutput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,oBAAoB,MAAM,yBAAyB;AAAC;AAAA;AAG3D;AACA;;AAEA,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM;IAAEC,YAAY;IAAEC;EAAc,CAAC,GAAGJ,UAAU,CAACC,oBAAoB,CAAC;EAGxE,oBACE;IAAA,UAEII,MAAM,CAACC,OAAO,CAACF,aAAa,CAAC,CAACG,GAAG,CAAEC,YAAY,IAAK;MAClD,MAAMC,IAAI,GAAGD,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9B,MAAME,IAAI,GAAGF,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE9B,IAAIE,IAAI,CAACC,MAAM,EAAE;QACf,oBACE;UAAA,UAEID,IAAI,CAACH,GAAG,CAAEK,IAAI,IAAK;YACjB;YACA,IAAIT,YAAY,CAACM,IAAI,CAAC,EAAE;cACtB,OAAOJ,MAAM,CAACC,OAAO,CAACH,YAAY,CAACM,IAAI,CAAC,CAAC,CAACF,GAAG,CAAEM,QAAQ,IAAK;gBAC1D;gBACA,MAAMC,cAAc,GAAGD,QAAQ,CAAC,CAAC,CAAC;gBAElCE,OAAO,CAACC,GAAG,CAACF,cAAc,CAAC;gBAE3B,oBACE;kBAAA,UAAK;gBAEL;kBAAA;kBAAA;kBAAA;gBAAA,QAAM;;gBAGR;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;cACF,CAAC,CAAC;YACJ;UACF,CAAC;QAAC,iBAEH;MAEP;IACF,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QAEA;AAEV,CAAC;AAAC,GAhEIZ,eAAe;AAAA,KAAfA,eAAe;AAkErB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}