{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    rootWordsObj,\n    selectedWords\n  } = useContext(NameGeneratorContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(selectedWords).map(selectedWord => {\n      const type = selectedWord[0]; // kinship\n      const list = selectedWord[1]; // [\"mother\"]\n\n      if (list.length) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: list.map(word => {\n            // console.log(type);\n            // console.log(list);\n            // const arr = rootWordsObj[type];\n            // console.log(arr);\n\n            const theOne = rootWordsObj[type].find(rootWordObj => {\n              var _rootWordObj$english;\n              // console.log(rootWordObj);\n              return (_rootWordObj$english = rootWordObj.english) === null || _rootWordObj$english === void 0 ? void 0 : _rootWordObj$english.includes(word);\n            });\n            console.log(theOne);\n            if (theOne) {\n              return Object.entries(theOne).map(entry => {\n                console.log(entry);\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: entry[0]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 41,\n                    columnNumber: 29\n                  }, this), Object.entries(entry[1]).map(foo => {\n                    // console.log(foo[1])\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [foo[0], foo[1]]\n                    }, `${foo[0]}-${foo[1]}`, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 46,\n                      columnNumber: 35\n                    }, this);\n                  })]\n                }, entry[0], true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 40,\n                  columnNumber: 27\n                }, this);\n              });\n            }\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: word\n            }, void 0, false);\n          })\n        }, void 0, false);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneratorOutput, \"t3BFoneH8GGetyxUCLHNDbgzoB4=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","NameGeneratorContext","GeneratorOutput","rootWordsObj","selectedWords","Object","entries","map","selectedWord","type","list","length","word","theOne","find","rootWordObj","english","includes","console","log","entry","foo"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport rootWordsObj from \"../root_words/rootWords\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst GeneratorOutput = () => {\n  const { rootWordsObj, selectedWords } = useContext(NameGeneratorContext);\n\n\n  return (\n    <div>\n      {\n        Object.entries(selectedWords).map((selectedWord) => {\n          const type = selectedWord[0]; // kinship\n          const list = selectedWord[1]; // [\"mother\"]\n\n          if (list.length) {\n            return (\n              <>\n                {\n                  list.map((word) => {\n                    // console.log(type);\n                    // console.log(list);\n                    // const arr = rootWordsObj[type];\n                    // console.log(arr);\n\n                    const theOne = rootWordsObj[type].find((rootWordObj) => {\n                      // console.log(rootWordObj);\n                      return rootWordObj.english?.includes(word);\n                    });\n\n                    console.log(theOne);\n\n                    if (theOne) {\n                      return Object.entries(theOne).map((entry) => {\n                        console.log(entry);\n                        return (\n                          <div key={entry[0]}>\n                            <h4>{entry[0]}</h4>\n                            {\n                              Object.entries(entry[1]).map((foo) => {\n                                // console.log(foo[1])\n                                return (\n                                  <div key={`${foo[0]}-${foo[1]}`}>\n                                    {foo[0]}\n                                    {foo[1]}\n                                  </div>\n                                );\n                              })\n                            }\n                          </div>\n                        );\n                      })\n                    }\n\n                    return (\n                      <>\n                        {word}\n                      </>\n                    );\n                  })\n                }\n                {/*{*/}\n                {/*  list.map((word) => {*/}\n                {/*    // TODO: Make sense of all this; maybe I don't even need it*/}\n                {/*    if (rootWordsObj[type]) {*/}\n                {/*      return Object.entries(rootWordsObj[type]).map((wordName) => {*/}\n                {/*        // const engWord = wordName[0];*/}\n                {/*        const translationObj = wordName[1];*/}\n\n                {/*        console.log(rootWordsObj[type]);*/}\n\n                {/*        return (*/}\n                {/*          <div>*/}\n                {/*            lameo*/}\n                {/*          </div>*/}\n                {/*        );*/}\n\n                {/*        return Object.entries(translationObj).map((langWord) => {*/}\n                {/*          return (*/}\n                {/*            <div key={langWord[0]}>*/}\n                {/*              <h3>{word}</h3>*/}\n\n                {/*              {*/}\n                {/*                Object.entries(langWord[1]).map((foo) => {*/}\n                {/*                  return (*/}\n                {/*                    <div key={foo[0]}>*/}\n                {/*                      {*/}\n                {/*                        foo[1] && foo[1].length && (*/}\n                {/*                          <div>*/}\n                {/*                            {foo[1][0]}, {foo[0]}*/}\n                {/*                          </div>*/}\n                {/*                        )*/}\n                {/*                      }*/}\n                {/*                    </div>*/}\n                {/*                  );*/}\n                {/*                })*/}\n                {/*              }*/}\n                {/*            </div>*/}\n                {/*          );*/}\n                {/*        })*/}\n                {/*      })*/}\n                {/*    }*/}\n                {/*  })*/}\n                {/*}*/}\n              </>\n            );\n          }\n        })\n      }\n    </div>\n  );\n};\n\nexport default GeneratorOutput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,oBAAoB,MAAM,yBAAyB;AAAC;AAAA;AAG3D;AACA;;AAEA,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM;IAAEC,YAAY;IAAEC;EAAc,CAAC,GAAGJ,UAAU,CAACC,oBAAoB,CAAC;EAGxE,oBACE;IAAA,UAEII,MAAM,CAACC,OAAO,CAACF,aAAa,CAAC,CAACG,GAAG,CAAEC,YAAY,IAAK;MAClD,MAAMC,IAAI,GAAGD,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9B,MAAME,IAAI,GAAGF,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE9B,IAAIE,IAAI,CAACC,MAAM,EAAE;QACf,oBACE;UAAA,UAEID,IAAI,CAACH,GAAG,CAAEK,IAAI,IAAK;YACjB;YACA;YACA;YACA;;YAEA,MAAMC,MAAM,GAAGV,YAAY,CAACM,IAAI,CAAC,CAACK,IAAI,CAAEC,WAAW,IAAK;cAAA;cACtD;cACA,+BAAOA,WAAW,CAACC,OAAO,yDAAnB,qBAAqBC,QAAQ,CAACL,IAAI,CAAC;YAC5C,CAAC,CAAC;YAEFM,OAAO,CAACC,GAAG,CAACN,MAAM,CAAC;YAEnB,IAAIA,MAAM,EAAE;cACV,OAAOR,MAAM,CAACC,OAAO,CAACO,MAAM,CAAC,CAACN,GAAG,CAAEa,KAAK,IAAK;gBAC3CF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;gBAClB,oBACE;kBAAA,wBACE;oBAAA,UAAKA,KAAK,CAAC,CAAC;kBAAC;oBAAA;oBAAA;oBAAA;kBAAA,QAAM,EAEjBf,MAAM,CAACC,OAAO,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC,CAACb,GAAG,CAAEc,GAAG,IAAK;oBACpC;oBACA,oBACE;sBAAA,WACGA,GAAG,CAAC,CAAC,CAAC,EACNA,GAAG,CAAC,CAAC,CAAC;oBAAA,GAFE,GAAEA,GAAG,CAAC,CAAC,CAAE,IAAGA,GAAG,CAAC,CAAC,CAAE,EAAC;sBAAA;sBAAA;sBAAA;oBAAA,QAGzB;kBAEV,CAAC,CAAC;gBAAA,GAXID,KAAK,CAAC,CAAC,CAAC;kBAAA;kBAAA;kBAAA;gBAAA,QAaZ;cAEV,CAAC,CAAC;YACJ;YAEA,oBACE;cAAA,UACGR;YAAI,iBACJ;UAEP,CAAC;QAAC,iBA6CH;MAEP;IACF,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QAEA;AAEV,CAAC;AAAC,GA3GIV,eAAe;AAAA,KAAfA,eAAe;AA6GrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}