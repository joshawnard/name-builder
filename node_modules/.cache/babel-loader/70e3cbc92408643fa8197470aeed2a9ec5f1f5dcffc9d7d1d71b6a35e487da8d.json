{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    selectedWords\n  } = useContext(NameGeneratorContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(selectedWords).map(selectedWord => {\n      const list = selectedWord[1];\n      if (list.length) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: list.map(word => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: word\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 23\n            }, this);\n          })\n        }, void 0, false);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneratorOutput, \"c4vNfki0qWzfuBjM8AK8DZwwLmo=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","NameGeneratorContext","GeneratorOutput","selectedWords","Object","entries","map","selectedWord","list","length","word"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\n\nconst GeneratorOutput = () => {\n  const { selectedWords } = useContext(NameGeneratorContext);\n\n  return (\n    <div>\n      {\n        Object.entries(selectedWords).map((selectedWord) => {\n          const list = selectedWord[1];\n\n          if (list.length) {\n            return (\n              <>\n                {\n                  list.map((word) => {\n                    return (\n                      <div>\n                        {word}\n                      </div>\n                    );\n                  })\n                }\n              </>\n            );\n          }\n        })\n      }\n    </div>\n  );\n};\n\nexport default GeneratorOutput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,oBAAoB,MAAM,yBAAyB;AAAC;AAAA;AAE3D,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM;IAAEC;EAAc,CAAC,GAAGH,UAAU,CAACC,oBAAoB,CAAC;EAE1D,oBACE;IAAA,UAEIG,MAAM,CAACC,OAAO,CAACF,aAAa,CAAC,CAACG,GAAG,CAAEC,YAAY,IAAK;MAClD,MAAMC,IAAI,GAAGD,YAAY,CAAC,CAAC,CAAC;MAE5B,IAAIC,IAAI,CAACC,MAAM,EAAE;QACf,oBACE;UAAA,UAEID,IAAI,CAACF,GAAG,CAAEI,IAAI,IAAK;YACjB,oBACE;cAAA,UACGA;YAAI;cAAA;cAAA;cAAA;YAAA,QACD;UAEV,CAAC;QAAC,iBAEH;MAEP;IACF,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QAEA;AAEV,CAAC;AAAC,GA5BIR,eAAe;AAAA,KAAfA,eAAe;AA8BrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}