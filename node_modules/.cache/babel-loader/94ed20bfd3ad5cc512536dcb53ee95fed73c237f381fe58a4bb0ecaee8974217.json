{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-builder/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useMemo } from 'react';\nimport GridLayout from \"react-grid-layout\";\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    rootWordsObj,\n    selectedBits,\n    settings: {\n      showFormattedWords\n    }\n  } = useContext(NameGeneratorContext);\n\n  // const layout = [\n  //   { i: \"a\", x: 0, y: 0, w: 1, h: 2, static: true },\n  //   { i: \"b\", x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4 },\n  //   { i: \"c\", x: 4, y: 0, w: 1, h: 2 }\n  // ];\n  const layout = useMemo(() => {\n    return selectedBits.map((bit, index) => {\n      return {\n        i: bit,\n        x: 1,\n        y: index + 1,\n        w: bit.length,\n        h: 1,\n        minW: 2,\n        maxW: 4\n      };\n    });\n  }, [selectedBits]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Bits!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GridLayout, {\n      className: \"layout\",\n      layout: layout,\n      cols: 36,\n      rowHeight: 30,\n      width: 1200,\n      children: selectedBits.map(bit => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: bit\n        }, bit, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  // return (\n  //   <>\n  //     <div\n  //       className=\"formatted-word-wrapper\"\n  //       style={formattedWordsStyle}\n  //     >\n  //       {renderFormattedWords(formattedWordStructures)}\n  //     </div>\n  //\n  //     <div\n  //       className=\"generated-names-wrapper\"\n  //       style={generatedNamesStyle}\n  //     >\n  //       {renderGenerated(generatedNames)}\n  //     </div>\n  //   </>\n  // );\n};\n_s(GeneratorOutput, \"hBa7cYL1kv8IzXCLazdFraMAIlw=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","useMemo","GridLayout","NameGeneratorContext","GeneratorOutput","rootWordsObj","selectedBits","settings","showFormattedWords","layout","map","bit","index","i","x","y","w","length","h","minW","maxW"],"sources":["/Users/jard/Desktop/code/name-builder/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport GridLayout from \"react-grid-layout\";\n\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport formatSelectedWords from \"../utils/formatSelectedWords\";\nimport { GeneratedName } from \"../interfaces/rootWordInterface\";\nimport renderFormattedWords from '../utils/renderFormattedWords';\nimport renderGenerated from \"../utils/renderGeneratedNames\";\nimport generateNames from \"../utils/generateNames\";\n\nconst GeneratorOutput = () => {\n  const {\n    rootWordsObj,\n    selectedBits,\n    settings: { showFormattedWords },\n  } = useContext(NameGeneratorContext);\n\n  // const layout = [\n  //   { i: \"a\", x: 0, y: 0, w: 1, h: 2, static: true },\n  //   { i: \"b\", x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4 },\n  //   { i: \"c\", x: 4, y: 0, w: 1, h: 2 }\n  // ];\n  const layout = useMemo(() => {\n    return selectedBits.map((bit, index) => {\n      return {\n        i: bit,\n        x: 1,\n        y: index+1,\n        w: bit.length,\n        h: 1,\n        minW: 2,\n        maxW: 4,\n      };\n    });\n  }, [selectedBits]);\n\n  return (\n    <>\n      <h2>Bits!</h2>\n\n      <GridLayout\n        className=\"layout\"\n        layout={layout}\n        cols={36}\n        rowHeight={30}\n        width={1200}\n      >\n        {\n          selectedBits.map((bit) => {\n            return (\n              <div key={bit}>{bit}</div>\n            );\n          })\n        }\n      </GridLayout>\n    </>\n  );\n\n  // return (\n  //   <>\n  //     <div\n  //       className=\"formatted-word-wrapper\"\n  //       style={formattedWordsStyle}\n  //     >\n  //       {renderFormattedWords(formattedWordStructures)}\n  //     </div>\n  //\n  //     <div\n  //       className=\"generated-names-wrapper\"\n  //       style={generatedNamesStyle}\n  //     >\n  //       {renderGenerated(generatedNames)}\n  //     </div>\n  //   </>\n  // );\n};\n\nexport default GeneratorOutput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAaC,OAAO,QAAkB,OAAO;AACvE,OAAOC,UAAU,MAAM,mBAAmB;AAE1C,OAAOC,oBAAoB,MAAM,yBAAyB;AAAC;AAAA;AAO3D,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM;IACJC,YAAY;IACZC,YAAY;IACZC,QAAQ,EAAE;MAAEC;IAAmB;EACjC,CAAC,GAAGR,UAAU,CAACG,oBAAoB,CAAC;;EAEpC;EACA;EACA;EACA;EACA;EACA,MAAMM,MAAM,GAAGR,OAAO,CAAC,MAAM;IAC3B,OAAOK,YAAY,CAACI,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;MACtC,OAAO;QACLC,CAAC,EAAEF,GAAG;QACNG,CAAC,EAAE,CAAC;QACJC,CAAC,EAAEH,KAAK,GAAC,CAAC;QACVI,CAAC,EAAEL,GAAG,CAACM,MAAM;QACbC,CAAC,EAAE,CAAC;QACJC,IAAI,EAAE,CAAC;QACPC,IAAI,EAAE;MACR,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACd,YAAY,CAAC,CAAC;EAElB,oBACE;IAAA,wBACE;MAAA,UAAI;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK,eAEd,QAAC,UAAU;MACT,SAAS,EAAC,QAAQ;MAClB,MAAM,EAAEG,MAAO;MACf,IAAI,EAAE,EAAG;MACT,SAAS,EAAE,EAAG;MACd,KAAK,EAAE,IAAK;MAAA,UAGVH,YAAY,CAACI,GAAG,CAAEC,GAAG,IAAK;QACxB,oBACE;UAAA,UAAgBA;QAAG,GAATA,GAAG;UAAA;UAAA;UAAA;QAAA,QAAa;MAE9B,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QAEO;EAAA,gBACZ;;EAGL;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAAC,GAjEIP,eAAe;AAAA,KAAfA,eAAe;AAmErB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}