{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/WordSelectForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSelectForm = () => {\n  _s();\n  const {\n    engWords,\n    selectedWords,\n    setSelectedWords\n  } = useContext(NameGeneratorContext);\n  const handleCheck = (e, type, word) => {\n    const {\n      currentTarget: {\n        checked\n      }\n    } = e;\n    if (checked && selectedWords[type]) {\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [...selectedWords[type], word]\n      });\n    } else if (checked) {\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [word]\n      });\n    } else {\n      let words = selectedWords[type];\n      const index = words.indexOf(word, 0);\n      if (index > -1) {\n        words.splice(index, 1);\n      }\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [...words]\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: engWords.map(engWordCategory => {\n        return Object.entries(engWordCategory).map(foo => {\n          const [category, wordObjArr] = foo;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 19\n            }, this), wordObjArr.map((word, index) => {\n              if (word) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      name: word,\n                      onChange: e => handleCheck(e, category, word),\n                      type: \"checkbox\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 60,\n                      columnNumber: 31\n                    }, this), word]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 59,\n                    columnNumber: 29\n                  }, this)\n                }, `word-${index}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 27\n                }, this);\n              }\n              return null;\n            })]\n          }, category, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(WordSelectForm, \"1rgsOr3rNZc2jqlejXLw0dlIq9U=\");\n_c = WordSelectForm;\nexport default WordSelectForm;\nvar _c;\n$RefreshReg$(_c, \"WordSelectForm\");","map":{"version":3,"names":["React","useContext","NameGeneratorContext","WordSelectForm","engWords","selectedWords","setSelectedWords","handleCheck","e","type","word","currentTarget","checked","words","index","indexOf","splice","map","engWordCategory","Object","entries","foo","category","wordObjArr"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/WordSelectForm.tsx"],"sourcesContent":["import React, { ChangeEvent, useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport rootWordsObj from \"../root_words/rootWords\";\n\nconst WordSelectForm = (): JSX.Element => {\n  const { engWords, selectedWords, setSelectedWords } = useContext(NameGeneratorContext);\n\n  const handleCheck = (e: ChangeEvent<HTMLInputElement>, type: string, word: string) => {\n    const { currentTarget: { checked } } = e;\n\n    if (checked && selectedWords[type]) {\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [\n          ...selectedWords[type],\n          word,\n        ],\n      });\n    } else if (checked) {\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [\n          word,\n        ],\n      });\n    } else {\n      let words = selectedWords[type]\n      const index = words.indexOf(word, 0);\n\n      if (index > -1) {\n         words.splice(index, 1);\n      }\n\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [...words],\n      });\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        {\n          engWords.map((engWordCategory) => {\n            return Object.entries(engWordCategory).map((foo) => {\n              const [category, wordObjArr] = foo;\n\n              return (\n                <div\n                  key={category}>\n                  <h3>{category}</h3>\n\n                  {\n                    wordObjArr.map((word, index) => {\n                      if (word) {\n                        return (\n                          <div key={`word-${index}`}>\n                            <label>\n                              <input\n                                name={word}\n                                onChange={(e) => handleCheck(e, category, word)}\n                                type=\"checkbox\"\n                              />\n\n                              {word}\n                            </label>\n                          </div>\n                        );\n                      }\n\n                      return null;\n                    })\n                  }\n                </div>\n              );\n            })\n          })\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default WordSelectForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAiBC,UAAU,QAAQ,OAAO;AACtD,OAAOC,oBAAoB,MAAM,yBAAyB;AAAC;AAG3D,MAAMC,cAAc,GAAG,MAAmB;EAAA;EACxC,MAAM;IAAEC,QAAQ;IAAEC,aAAa;IAAEC;EAAiB,CAAC,GAAGL,UAAU,CAACC,oBAAoB,CAAC;EAEtF,MAAMK,WAAW,GAAG,CAACC,CAAgC,EAAEC,IAAY,EAAEC,IAAY,KAAK;IACpF,MAAM;MAAEC,aAAa,EAAE;QAAEC;MAAQ;IAAE,CAAC,GAAGJ,CAAC;IAExC,IAAII,OAAO,IAAIP,aAAa,CAACI,IAAI,CAAC,EAAE;MAClCH,gBAAgB,CAAC;QACf,GAAGD,aAAa;QAChB,CAACI,IAAI,GAAG,CACN,GAAGJ,aAAa,CAACI,IAAI,CAAC,EACtBC,IAAI;MAER,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIE,OAAO,EAAE;MAClBN,gBAAgB,CAAC;QACf,GAAGD,aAAa;QAChB,CAACI,IAAI,GAAG,CACNC,IAAI;MAER,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAIG,KAAK,GAAGR,aAAa,CAACI,IAAI,CAAC;MAC/B,MAAMK,KAAK,GAAGD,KAAK,CAACE,OAAO,CAACL,IAAI,EAAE,CAAC,CAAC;MAEpC,IAAII,KAAK,GAAG,CAAC,CAAC,EAAE;QACbD,KAAK,CAACG,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACzB;MAEAR,gBAAgB,CAAC;QACf,GAAGD,aAAa;QAChB,CAACI,IAAI,GAAG,CAAC,GAAGI,KAAK;MACnB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACE;IAAA,uBACE;MAAA,UAEIT,QAAQ,CAACa,GAAG,CAAEC,eAAe,IAAK;QAChC,OAAOC,MAAM,CAACC,OAAO,CAACF,eAAe,CAAC,CAACD,GAAG,CAAEI,GAAG,IAAK;UAClD,MAAM,CAACC,QAAQ,EAAEC,UAAU,CAAC,GAAGF,GAAG;UAElC,oBACE;YAAA,wBAEE;cAAA,UAAKC;YAAQ;cAAA;cAAA;cAAA;YAAA,QAAM,EAGjBC,UAAU,CAACN,GAAG,CAAC,CAACP,IAAI,EAAEI,KAAK,KAAK;cAC9B,IAAIJ,IAAI,EAAE;gBACR,oBACE;kBAAA,uBACE;oBAAA,wBACE;sBACE,IAAI,EAAEA,IAAK;sBACX,QAAQ,EAAGF,CAAC,IAAKD,WAAW,CAACC,CAAC,EAAEc,QAAQ,EAAEZ,IAAI,CAAE;sBAChD,IAAI,EAAC;oBAAU;sBAAA;sBAAA;sBAAA;oBAAA,QACf,EAEDA,IAAI;kBAAA;oBAAA;oBAAA;oBAAA;kBAAA;gBACC,GATC,QAAOI,KAAM,EAAC;kBAAA;kBAAA;kBAAA;gBAAA,QAUnB;cAEV;cAEA,OAAO,IAAI;YACb,CAAC,CAAC;UAAA,GAtBCQ,QAAQ;YAAA;YAAA;YAAA;UAAA,QAwBT;QAEV,CAAC,CAAC;MACJ,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA;EAEA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GA9EInB,cAAc;AAAA,KAAdA,cAAc;AAgFpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}