{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratorOutput = () => {\n  _s();\n  const {\n    rootWordsObj,\n    selectedWords\n  } = useContext(NameGeneratorContext);\n  const formatSelectedWords = () => {\n    const selectedEntries = Object.entries(selectedWords);\n    if (selectedEntries.length) {\n      return Object.entries(selectedWords).map(selectedWord => {\n        return;\n      });\n    }\n    return null;\n  };\n  const renderSelectedWords = () => {\n    return Object.entries(selectedWords).map(selectedWord => {\n      const type = selectedWord[0];\n      const list = selectedWord[1];\n      if (list.length) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: list.map(word => {\n            const theOne = rootWordsObj[type].find(rootWordObj => {\n              var _rootWordObj$english;\n              return (_rootWordObj$english = rootWordObj.english) === null || _rootWordObj$english === void 0 ? void 0 : _rootWordObj$english.includes(word);\n            });\n            if (theOne) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: word\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 23\n                }, this), Object.entries(theOne).map(entry => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: /*#__PURE__*/_jsxDEV(\"b\", {\n                        children: entry[0]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 45,\n                        columnNumber: 37\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 45,\n                      columnNumber: 31\n                    }, this), \":\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: entry[1]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 47,\n                      columnNumber: 31\n                    }, this)]\n                  }, entry[0], true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 44,\n                    columnNumber: 29\n                  }, this);\n                })]\n              }, word, true, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 21\n              }, this);\n            }\n            return null;\n          })\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this);\n      }\n    });\n  };\n  const playAround = () => {\n    if (Object.entries(selectedWords).length) {\n      const parsedWords = Object.entries(selectedWords).map(wordObj => {\n        console.log(wordObj);\n        return wordObj;\n      });\n\n      // console.log(parsedWords);\n    }\n\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderSelectedWords(), playAround()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneratorOutput, \"t3BFoneH8GGetyxUCLHNDbgzoB4=\");\n_c = GeneratorOutput;\nexport default GeneratorOutput;\nvar _c;\n$RefreshReg$(_c, \"GeneratorOutput\");","map":{"version":3,"names":["React","useContext","NameGeneratorContext","GeneratorOutput","rootWordsObj","selectedWords","formatSelectedWords","selectedEntries","Object","entries","length","map","selectedWord","renderSelectedWords","type","list","word","theOne","find","rootWordObj","english","includes","entry","playAround","parsedWords","wordObj","console","log"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/GeneratorOutput.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\n\n// TODO:\n// Add randomizer that constructs multiple roots together\n\nconst GeneratorOutput = () => {\n  const { rootWordsObj, selectedWords } = useContext(NameGeneratorContext);\n\n  const formatSelectedWords = () => {\n    const selectedEntries = Object.entries(selectedWords);\n\n    if (selectedEntries.length) {\n      return Object.entries(selectedWords).map((selectedWord) => {\n        return\n      });\n    }\n\n    return null;\n  };\n\n  const renderSelectedWords = () => {\n    return Object.entries(selectedWords).map((selectedWord) => {\n      const type = selectedWord[0];\n      const list = selectedWord[1];\n\n      if (list.length) {\n        return (\n          <div key={type}>\n            {\n              list.map((word) => {\n                const theOne = rootWordsObj[type].find((rootWordObj) => {\n                  return rootWordObj.english?.includes(word);\n                });\n\n                if (theOne) {\n                  return (\n                    <div key={word}>\n                      <h3>{word}</h3>\n\n                      {\n                        Object.entries(theOne).map((entry) => {\n                          return (\n                            <div key={entry[0]}>\n                              <span><b>{entry[0]}</b></span>:\n                              {' '}\n                              <span>{entry[1]}</span>\n                            </div>\n                          );\n                        })\n                      }\n                    </div>\n                  );\n                }\n\n                return null;\n              })\n            }\n          </div>\n        );\n      }\n    })\n  };\n\n  const playAround = (): JSX.Element | null => {\n    if (Object.entries(selectedWords).length) {\n      const parsedWords = Object.entries(selectedWords).map((wordObj) => {\n        console.log(wordObj);\n        return wordObj;\n      });\n\n      // console.log(parsedWords);\n    }\n\n    return null;\n  };\n\n  return (\n    <div>\n      {renderSelectedWords()}\n\n      {playAround()}\n    </div>\n  );\n};\n\nexport default GeneratorOutput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,oBAAoB,MAAM,yBAAyB;;AAE1D;AACA;AAAA;AAEA,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM;IAAEC,YAAY;IAAEC;EAAc,CAAC,GAAGJ,UAAU,CAACC,oBAAoB,CAAC;EAExE,MAAMI,mBAAmB,GAAG,MAAM;IAChC,MAAMC,eAAe,GAAGC,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC;IAErD,IAAIE,eAAe,CAACG,MAAM,EAAE;MAC1B,OAAOF,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC,CAACM,GAAG,CAAEC,YAAY,IAAK;QACzD;MACF,CAAC,CAAC;IACJ;IAEA,OAAO,IAAI;EACb,CAAC;EAED,MAAMC,mBAAmB,GAAG,MAAM;IAChC,OAAOL,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC,CAACM,GAAG,CAAEC,YAAY,IAAK;MACzD,MAAME,IAAI,GAAGF,YAAY,CAAC,CAAC,CAAC;MAC5B,MAAMG,IAAI,GAAGH,YAAY,CAAC,CAAC,CAAC;MAE5B,IAAIG,IAAI,CAACL,MAAM,EAAE;QACf,oBACE;UAAA,UAEIK,IAAI,CAACJ,GAAG,CAAEK,IAAI,IAAK;YACjB,MAAMC,MAAM,GAAGb,YAAY,CAACU,IAAI,CAAC,CAACI,IAAI,CAAEC,WAAW,IAAK;cAAA;cACtD,+BAAOA,WAAW,CAACC,OAAO,yDAAnB,qBAAqBC,QAAQ,CAACL,IAAI,CAAC;YAC5C,CAAC,CAAC;YAEF,IAAIC,MAAM,EAAE;cACV,oBACE;gBAAA,wBACE;kBAAA,UAAKD;gBAAI;kBAAA;kBAAA;kBAAA;gBAAA,QAAM,EAGbR,MAAM,CAACC,OAAO,CAACQ,MAAM,CAAC,CAACN,GAAG,CAAEW,KAAK,IAAK;kBACpC,oBACE;oBAAA,wBACE;sBAAA,uBAAM;wBAAA,UAAIA,KAAK,CAAC,CAAC;sBAAC;wBAAA;wBAAA;wBAAA;sBAAA;oBAAK;sBAAA;sBAAA;sBAAA;oBAAA,QAAO,KAC9B,EAAC,GAAG,eACJ;sBAAA,UAAOA,KAAK,CAAC,CAAC;oBAAC;sBAAA;sBAAA;sBAAA;oBAAA,QAAQ;kBAAA,GAHfA,KAAK,CAAC,CAAC,CAAC;oBAAA;oBAAA;oBAAA;kBAAA,QAIZ;gBAEV,CAAC,CAAC;cAAA,GAZIN,IAAI;gBAAA;gBAAA;gBAAA;cAAA,QAcR;YAEV;YAEA,OAAO,IAAI;UACb,CAAC;QAAC,GA5BIF,IAAI;UAAA;UAAA;UAAA;QAAA,QA8BR;MAEV;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMS,UAAU,GAAG,MAA0B;IAC3C,IAAIf,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC,CAACK,MAAM,EAAE;MACxC,MAAMc,WAAW,GAAGhB,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC,CAACM,GAAG,CAAEc,OAAO,IAAK;QACjEC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;QACpB,OAAOA,OAAO;MAChB,CAAC,CAAC;;MAEF;IACF;;IAEA,OAAO,IAAI;EACb,CAAC;EAED,oBACE;IAAA,WACGZ,mBAAmB,EAAE,EAErBU,UAAU,EAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QACT;AAEV,CAAC;AAAC,GA9EIpB,eAAe;AAAA,KAAfA,eAAe;AAgFrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}