{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/components/WordSelectForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport NameGeneratorContext from \"../NameGeneratorContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSelectForm = () => {\n  _s();\n  const {\n    engWords,\n    selectedWords,\n    setSelectedWords\n  } = useContext(NameGeneratorContext);\n  const handleCheck = (e, type, word) => {\n    const {\n      currentTarget: {\n        checked\n      }\n    } = e;\n    if (checked) {\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [...selectedWords[type], word]\n      });\n    } else {\n      let words = selectedWords[type];\n      const index = words.indexOf(word, 0);\n      if (index > -1) {\n        words.splice(index, 1);\n      }\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [...words]\n      });\n    }\n  };\n\n  // console.log(typeof engWords);\n  // console.log(engWords.length);\n  // console.log(engWords);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Here!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), engWords.map(engWordCategory => {\n      // console.log(engWordCategory);\n      return Object.entries(engWordCategory).map(foo => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: foo[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this);\n      });\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(WordSelectForm, \"1rgsOr3rNZc2jqlejXLw0dlIq9U=\");\n_c = WordSelectForm;\nexport default WordSelectForm;\nvar _c;\n$RefreshReg$(_c, \"WordSelectForm\");","map":{"version":3,"names":["React","useContext","NameGeneratorContext","WordSelectForm","engWords","selectedWords","setSelectedWords","handleCheck","e","type","word","currentTarget","checked","words","index","indexOf","splice","map","engWordCategory","Object","entries","foo"],"sources":["/Users/jard/Desktop/code/name-generator/src/components/WordSelectForm.tsx"],"sourcesContent":["import React, { ChangeEvent, useContext, useEffect } from 'react';\nimport { wordType } from \"../types/selectedWords\";\nimport NameGeneratorContext from \"../NameGeneratorContext\";\n\nconst WordSelectForm = (): JSX.Element => {\n  const { engWords, selectedWords, setSelectedWords } = useContext(NameGeneratorContext);\n\n\n\n  const handleCheck = (e: ChangeEvent<HTMLInputElement>, type: wordType, word: string) => {\n    const { currentTarget: { checked } } = e;\n\n    if (checked) {\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [\n          ...selectedWords[type],\n          word,\n        ],\n      });\n    } else {\n      let words = selectedWords[type]\n      const index = words.indexOf(word, 0);\n\n      if (index > -1) {\n         words.splice(index, 1);\n      }\n\n      setSelectedWords({\n        ...selectedWords,\n        [type]: [...words],\n      });\n    }\n  };\n\n  // console.log(typeof engWords);\n  // console.log(engWords.length);\n  // console.log(engWords);\n\n  return (\n    <div>\n      <div>\n        Here!\n      </div>\n\n      {\n        engWords.map((engWordCategory) => {\n          // console.log(engWordCategory);\n          return Object.entries(engWordCategory).map((foo) => {\n            return (\n              <div>\n                {foo[0]}\n              </div>\n            );\n          })\n        })\n      }\n\n      {/*<div>*/}\n      {/*  <h3>*/}\n      {/*    Kinship*/}\n      {/*  </h3>*/}\n\n      {/*  {*/}\n      {/*    kinshipWords.map((wordObj) => {*/}\n      {/*      const word = Object.keys(wordObj)[0];*/}\n\n      {/*      return (*/}\n      {/*        <div key={word}>*/}\n      {/*          <label>*/}\n      {/*            <input*/}\n      {/*              name={word}*/}\n      {/*              onChange={(e) => handleCheck(e, \"kinship\", word)}*/}\n      {/*              type=\"checkbox\"*/}\n      {/*            />*/}\n\n      {/*            {word}*/}\n      {/*          </label>*/}\n      {/*        </div>*/}\n      {/*      );*/}\n      {/*    })*/}\n      {/*  }*/}\n      {/*</div>*/}\n    </div>\n  );\n};\n\nexport default WordSelectForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAiBC,UAAU,QAAmB,OAAO;AAEjE,OAAOC,oBAAoB,MAAM,yBAAyB;AAAC;AAE3D,MAAMC,cAAc,GAAG,MAAmB;EAAA;EACxC,MAAM;IAAEC,QAAQ;IAAEC,aAAa;IAAEC;EAAiB,CAAC,GAAGL,UAAU,CAACC,oBAAoB,CAAC;EAItF,MAAMK,WAAW,GAAG,CAACC,CAAgC,EAAEC,IAAc,EAAEC,IAAY,KAAK;IACtF,MAAM;MAAEC,aAAa,EAAE;QAAEC;MAAQ;IAAE,CAAC,GAAGJ,CAAC;IAExC,IAAII,OAAO,EAAE;MACXN,gBAAgB,CAAC;QACf,GAAGD,aAAa;QAChB,CAACI,IAAI,GAAG,CACN,GAAGJ,aAAa,CAACI,IAAI,CAAC,EACtBC,IAAI;MAER,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAIG,KAAK,GAAGR,aAAa,CAACI,IAAI,CAAC;MAC/B,MAAMK,KAAK,GAAGD,KAAK,CAACE,OAAO,CAACL,IAAI,EAAE,CAAC,CAAC;MAEpC,IAAII,KAAK,GAAG,CAAC,CAAC,EAAE;QACbD,KAAK,CAACG,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACzB;MAEAR,gBAAgB,CAAC;QACf,GAAGD,aAAa;QAChB,CAACI,IAAI,GAAG,CAAC,GAAGI,KAAK;MACnB,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA;EACA;;EAEA,oBACE;IAAA,wBACE;MAAA,UAAK;IAEL;MAAA;MAAA;MAAA;IAAA,QAAM,EAGJT,QAAQ,CAACa,GAAG,CAAEC,eAAe,IAAK;MAChC;MACA,OAAOC,MAAM,CAACC,OAAO,CAACF,eAAe,CAAC,CAACD,GAAG,CAAEI,GAAG,IAAK;QAClD,oBACE;UAAA,UACGA,GAAG,CAAC,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA,QACH;MAEV,CAAC,CAAC;IACJ,CAAC,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QA4BA;AAEV,CAAC;AAAC,GAjFIlB,cAAc;AAAA,KAAdA,cAAc;AAmFpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}