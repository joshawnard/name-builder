{"ast":null,"code":"var _jsxFileName = \"/Users/jard/Desktop/code/name-generator/src/utils/renderFormattedWords.tsx\";\nimport React from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst renderFormattedWords = formattedWordStructures => {\n  if (formattedWordStructures) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [formattedWordStructures.map(formattedWord => {\n        if (formattedWord) {\n          return formattedWord.map(word => {\n            if (word) {\n              return Object.entries(word).map(list => {\n                const englishWord = list[0];\n\n                // TODO: table format?\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"formatted-word\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: englishWord\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 24,\n                    columnNumber: 25\n                  }, this), list[1].map(wordObj => {\n                    if (wordObj) {\n                      const {\n                        language,\n                        translation,\n                        englishMeaning\n                      } = wordObj;\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                          children: [translation, \":\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 35,\n                          columnNumber: 35\n                        }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                          children: language\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 39,\n                          columnNumber: 35\n                        }, this), ' - ', /*#__PURE__*/_jsxDEV(\"em\", {\n                          children: englishMeaning || englishWord\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 43,\n                          columnNumber: 35\n                        }, this)]\n                      }, `${translation}-${language}`, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 34,\n                        columnNumber: 33\n                      }, this);\n                    }\n                  })]\n                }, englishWord, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 20,\n                  columnNumber: 23\n                }, this);\n              });\n            }\n          });\n        }\n      }), /*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          margin: \"1rem 0\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  return null;\n};\nexport default renderFormattedWords;","map":{"version":3,"names":["React","renderFormattedWords","formattedWordStructures","map","formattedWord","word","Object","entries","list","englishWord","wordObj","language","translation","englishMeaning","margin"],"sources":["/Users/jard/Desktop/code/name-generator/src/utils/renderFormattedWords.tsx"],"sourcesContent":["import React from \"react\";\nimport { FormattedWordStructures } from \"../interfaces/rootWordInterface\";\n\nconst renderFormattedWords = (\n  formattedWordStructures: FormattedWordStructures,\n): JSX.Element | null => {\n  if (formattedWordStructures) {\n    return (\n      <>\n        {\n          formattedWordStructures.map((formattedWord) => {\n            if (formattedWord) {\n              return formattedWord.map((word) => {\n                if (word) {\n                  return Object.entries(word).map((list) => {\n                    const englishWord = list[0];\n\n                    // TODO: table format?\n                    return (\n                      <div\n                        className=\"formatted-word\"\n                        key={englishWord}\n                      >\n                        <h4>\n                          {englishWord}\n                        </h4>\n\n                        {\n                          list[1].map((wordObj) => {\n                            if (wordObj) {\n                              const { language, translation, englishMeaning } = wordObj;\n\n                              return (\n                                <div key={`${translation}-${language}`}>\n                                  <strong>\n                                    {translation}:\n                                  </strong>\n                                  {' '}\n                                  <span>\n                                    {language}\n                                  </span>\n                                  {' - '}\n                                  <em>\n                                    {englishMeaning || englishWord}\n                                  </em>\n                                </div>\n                              );\n                            }\n                          })\n                        }\n                      </div>\n                    );\n                  });\n                }\n              });\n            }\n          })\n        }\n\n        <hr style={{ margin: \"1rem 0\" }} />\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default renderFormattedWords;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAAA;AAG1B,MAAMC,oBAAoB,GACxBC,uBAAgD,IACzB;EACvB,IAAIA,uBAAuB,EAAE;IAC3B,oBACE;MAAA,WAEIA,uBAAuB,CAACC,GAAG,CAAEC,aAAa,IAAK;QAC7C,IAAIA,aAAa,EAAE;UACjB,OAAOA,aAAa,CAACD,GAAG,CAAEE,IAAI,IAAK;YACjC,IAAIA,IAAI,EAAE;cACR,OAAOC,MAAM,CAACC,OAAO,CAACF,IAAI,CAAC,CAACF,GAAG,CAAEK,IAAI,IAAK;gBACxC,MAAMC,WAAW,GAAGD,IAAI,CAAC,CAAC,CAAC;;gBAE3B;gBACA,oBACE;kBACE,SAAS,EAAC,gBAAgB;kBAAA,wBAG1B;oBAAA,UACGC;kBAAW;oBAAA;oBAAA;oBAAA;kBAAA,QACT,EAGHD,IAAI,CAAC,CAAC,CAAC,CAACL,GAAG,CAAEO,OAAO,IAAK;oBACvB,IAAIA,OAAO,EAAE;sBACX,MAAM;wBAAEC,QAAQ;wBAAEC,WAAW;wBAAEC;sBAAe,CAAC,GAAGH,OAAO;sBAEzD,oBACE;wBAAA,wBACE;0BAAA,WACGE,WAAW,EAAC,GACf;wBAAA;0BAAA;0BAAA;0BAAA;wBAAA,QAAS,EACR,GAAG,eACJ;0BAAA,UACGD;wBAAQ;0BAAA;0BAAA;0BAAA;wBAAA,QACJ,EACN,KAAK,eACN;0BAAA,UACGE,cAAc,IAAIJ;wBAAW;0BAAA;0BAAA;0BAAA;wBAAA,QAC3B;sBAAA,GAXI,GAAEG,WAAY,IAAGD,QAAS,EAAC;wBAAA;wBAAA;wBAAA;sBAAA,QAYhC;oBAEV;kBACF,CAAC,CAAC;gBAAA,GA3BCF,WAAW;kBAAA;kBAAA;kBAAA;gBAAA,QA6BZ;cAEV,CAAC,CAAC;YACJ;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,eAGJ;QAAI,KAAK,EAAE;UAAEK,MAAM,EAAE;QAAS;MAAE;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA,gBAClC;EAEP;EAEA,OAAO,IAAI;AACb,CAAC;AAED,eAAeb,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}